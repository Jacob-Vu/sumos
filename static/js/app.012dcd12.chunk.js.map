{"version":3,"sources":["utils/Extensions.ts","firebase/config.ts","models/TaskItem.ts","stores/TaskStore.ts","stores/SelectTaskStore.ts","stores/StorageStore.ts","stores/CommonStore.ts","stores/MoneyStore.ts","stores/RootStore.ts","components/ProgressBar.tsx","models/TransactionDetail.ts","components/EvalDetail.tsx","components/EvalResults.tsx","components/CommentList.tsx","components/TaskListItem.tsx","components/TodayTasks.tsx","components/KidReport.tsx","components/screens/HomeScreen.tsx","components/screens/LoginScreen.tsx","components/screens/TaskDetailScreen.tsx","components/screens/CameraScreen.tsx","components/screens/LoadingScreen.tsx","components/screens/MainStack.tsx","components/screens/ModelStack.tsx","App.tsx"],"names":["Date","prototype","format","mm","this","getMonth","dd","getDate","getFullYear","join","String","toDate","items","split","fire","auth","firebase","apps","length","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","storage","TaskItem","taskStore","id","task","cat","time","freqPerWeek","weekCount","attachments","comments","isSelected","isCompleted","toggleComplete","makeAutoObservable","action","TaskStore","taskList","periodUserList","loading","loadTaskList","user","dateSl","a","async","collection","doc","get","userDoc","weekFromDate","addDays","getDay","weekToDate","loadSelectedDate","weekTaskList","selectedTasks","find","x","date","seconds","toLocaleDateString","docPath","taskDoc","data","exists","workList","listTask","map","v","selectedItem","taskId","reduce","acc","dayTask","fromTask","runInAction","push","console","log","loadUserPeriod","userList","fromDate","userDataList","forEach","item","dataDate","selected","completed","filter","userDt","dataDates","dateSelects","where","saveSelectList","filterTasks","ref","url","set","lastUpdate","migrate","orderBy","computed","SelectTaskStore","dateStr","selectDoc","doneDoc","newItems","doneTasks","includes","lastUpdated","observable","StorageStore","addAttachments","taskItem","file","cbAction","path","getPlatformPath","value","name","getFileName","fileName","filePath","fileAttach","fetch","response","blob","child","put","getDownloadURL","Platform","OS","substring","indexOf","now","pop","uri","select","android","web","ios","getPlatformURI","imagePath","imgSource","isNaN","state","CommonStore","role","email","userName","MoneyStore","balance","transToday","loadBalanceAndTrans","datetime","loadBalance","loadTrans","total","target","addTrans","transDetail","users","startOfDay","endOfDay","trans","rootStore","selectTaskStore","storageStore","commonStore","moneyStore","storesContext","React","createContext","useStores","useContext","ProgressBar","props","bgcolor","fillerStyles","height","width","backgroundColor","borderRadius","textAlign","style","margin","padding","color","fontWeight","TransactionDetail","awardName","size","type","styles","StyleSheet","create","baseText","fontSize","titleText","awardValue","marginTop","fontStyle","borderWidth","borderBottomColor","borderBottomWidth","borderColor","input","maxWidth","marginLeft","EvalDetail","useState","commentValue","setCommentValue","setAwardValue","iconSize","setIconSize","getIconName","changeValue","delta","flexDirection","FontAwesome5","onPress","e","placeholder","onChangeText","tranDetail","onSubmitTranDetail","submitTranDetail","observer","useEffect","tabIndex","toFixed","completedPercent","tran","renderAward","userRole","toJS","CommentList","cmt","i","key","text","transparent","FontAwesome","taskButton","flex","justifyContent","alignContent","alignSelf","navigation","useNavigation","route","useRoute","showComment","setShowComment","View","TouchableWithoutFeedback","onSelectItem","attachItem","Image","source","params","minWidth","onValueChange","onDoneItem","position","navigate","sourceScreen","sourceData","takePicture","ImagePicker","granted","alert","result","cancelled","cbAttachAction","onAddFile","showImagePicker","marginBottom","setDate","photo","toggleSelect","SelectDay","val","ScrollView","sortedTaskList","totalSelected","totalCompleted","Button","title","initializing","setInitializing","onAuthStateChanged","setTab","tabChanged","onChangeTab","heading","TodayTasks","index","container","alignItems","image","inputView","TextInput","forgot_button","loginBtn","LoginScreen","setEmail","password","setPassword","error","setError","errorMessage","placeholderTextColor","secureTextEntry","TouchableOpacity","signInWithEmailAndPassword","then","catch","message","loginText","HelloWorldApp","camera","buttonContainer","button","ModalScreen","hasPermission","setHasPermission","Camera","Constants","Type","back","setType","setPhoto","setCamera","requestPermissionsAsync","status","Text","goBack","front","takePictureAsync","marginRight","LoadingScreen","setUser","MainStack","createStackNavigator","MainStackScreen","Navigator","headerMode","Screen","component","HomeScreen","CameraScreen","TaskDetailScreen","ModelStack","ModelStackScreen","RootStack","TaskApp","NavigationContainer","mode"],"mappings":"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","file":"static/js/app.012dcd12.chunk.js","sourcesContent":["Date.prototype.format = function() {\r\n    var mm = this.getMonth() + 1; // getMonth() is zero-based\r\n    var dd = this.getDate();\r\n\r\n    return [(dd>9 ? \"\" : \"0\") + dd,(mm>9 ? \"\" : \"0\") + mm,this.getFullYear()\r\n           ].join(\"-\");\r\n};\r\n\r\nString.prototype.toDate = function() {\r\n    const items = this.split(\"-\");\r\n    return new Date(items[2],items[1] - 1,items[0]);\r\n};","import firebase from \"@firebase/app\";\r\nimport \"@firebase/auth\";\r\nimport \"@firebase/firestore\";\r\nimport \"@firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCZ1W91h5gI4Ys3K44apJMX-dfAzKmKOzc\",\r\n    authDomain: \"todo-app-594e8.firebaseapp.com\",\r\n    projectId: \"todo-app-594e8\",\r\n    storageBucket: \"todo-app-594e8.appspot.com\",\r\n    messagingSenderId: \"254618059037\",\r\n    appId: \"1:254618059037:web:2a162824c6e6dfd3d921f4\",\r\n    measurementId: \"G-84M73W8WLD\"\r\n};\r\n\r\nlet fire = null;\r\nif (!firebase.apps.length) {\r\n   fire = firebase.initializeApp(firebaseConfig);\r\n} else {\r\n   fire = firebase.app(); // if already initialized, use that one\r\n}\r\n\r\nexport const auth = fire.auth();\r\n\r\nexport const db = fire.firestore();\r\n\r\nexport const storage = fire.storage();\r\n\r\nexport default {fire};","import { observable, computed, action, makeAutoObservable } from \"mobx\";\r\nimport { TaskStore } from 'stores/TaskStore';\r\n\r\nexport default class TaskItem {\r\n    taskStore: TaskStore;\r\n    id;\r\n    cat;\r\n    freqPerWeek;\r\n    time;\r\n    task;\r\n    isSelected;\r\n    isCompleted;\r\n    weekCount;\r\n    attachments;\r\n    comments;\r\n\r\n    constructor(taskStore, id, task, cat, time, freqPerWeek,weekCount,attachments = [],comments = [],isSelected = false, isCompleted = false) {\r\n\t\tthis.taskStore = taskStore;\r\n\t\tthis.id = id;\r\n        this.task = task;\r\n        this.cat = cat;\r\n        this.time = time;\r\n\t\tthis.freqPerWeek = freqPerWeek;\r\n        this.weekCount = weekCount;\r\n        this.isSelected = isSelected;\r\n        this.isCompleted = isCompleted;\r\n        this.attachments = attachments;\r\n        this.comments = comments;\r\n        makeAutoObservable(this);\r\n\t}\r\n\r\n    @action toggleSelect = () => {\r\n        this.isSelected = !this.isSelected;\r\n    }\r\n\r\n    toggleComplete = () => {\r\n        this.isCompleted = !this.isCompleted;\r\n    }\r\n\r\n    static fromTask(taskStore,task,weekCount,attachments = [], comments = [],isSelected = false, isCompleted = false){\r\n        return new TaskItem(taskStore,task.id, task.task, task.cat, task.time, task.freqPerWeek, weekCount,attachments, comments, isSelected, isCompleted);\r\n    }\r\n}","import { addDays, format } from \"date-fns\";\r\nimport orderBy from \"lodash/orderBy\";\r\nimport { action, computed, makeAutoObservable, runInAction } from \"mobx\";\r\nimport { db, storage } from \"../firebase/config\";\r\nimport TaskItem from \"../models/TaskItem\";\r\nimport \"../utils/Extensions\";\r\n\r\nclass TaskStore {\r\n  \r\n  taskList = [];\r\n  periodUserList = [];\r\n  loading = false;\r\n\r\n  constructor (){\r\n    console.log(\"Initialize TaskStore...\");\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  loadTaskList = async(user, dateSl) => {\r\n    this.loading = true;\r\n    const userDoc = await db.collection(\"todolist\").doc(\"default\").get();    \r\n\r\n    const weekFromDate = addDays(dateSl, dateSl.getDay() > 0? 1 -dateSl.getDay(): -6);\r\n    const weekToDate = addDays(dateSl, dateSl.getDay() > 0? 7 - dateSl.getDay(): 0);\r\n    const weekTaskList = await this.loadSelectedDate([user], weekFromDate, weekToDate);\r\n\r\n    let selectedTasks: [] = weekTaskList.find( x=> new Date(x.date.seconds*1000).toLocaleDateString() == dateSl.toLocaleDateString())?.selectedTasks;\r\n    if (!selectedTasks){\r\n      const docPath = `${user}_${format(dateSl, \"dd-MM-yyyy\")}`;\r\n      const taskDoc = await db.collection(\"selectlist\").doc(docPath).get();\r\n      selectedTasks = taskDoc.data()?.selectedTasks;\r\n    }\r\n\r\n    if (userDoc.exists && userDoc.data().workList) {\r\n      const listTask = userDoc.data().workList.map((v) => {\r\n        const selectedItem = selectedTasks?.find((x) => v.id == x.taskId);\r\n        const weekCount = weekTaskList.reduce((acc,dayTask) => {\r\n            if (dayTask.selectedTasks.find(x=> x.taskId == v.id)){\r\n                return acc += 1;\r\n            }\r\n            return acc;\r\n        },0);\r\n        return TaskItem.fromTask(\r\n          this,\r\n          v,\r\n          weekCount,\r\n          selectedItem?.attachments,\r\n          selectedItem?.comments,\r\n          selectedItem != null,\r\n          selectedItem?.isCompleted\r\n        );\r\n      });\r\n      runInAction(()=>{\r\n        this.taskList = [];\r\n        this.taskList.push(...listTask);\r\n        this.loading = false;\r\n      })\r\n    } else {\r\n      console.log(\"No doc values found\");\r\n    }\r\n  }\r\n\r\n  loadUserPeriod = async (userList, fromDate, toDate) => {\r\n    let userDataList = [];\r\n    this.loading = true;\r\n    const taskList = await this.loadSelectedDate(userList, fromDate, toDate);\r\n    taskList.forEach(item => {\r\n      let dataDate = {\r\n        date: format(new Date(item.date.seconds*1000),'dd-MM-yyyy'),\r\n        selected: item.selectedTasks.length,\r\n        completed: item.selectedTasks.filter( x=>x.isCompleted).length\r\n      };\r\n      const userDt = userDataList.find(x=> x.user == item.user);\r\n      if (!userDt){\r\n        userDataList.push({\r\n          user: item.user,\r\n          dataDates: [dataDate]\r\n        })\r\n      } else {\r\n        userDt.dataDates.push(dataDate);\r\n      }\r\n    });\r\n    runInAction(()=>{\r\n      this.loading = false;\r\n      this.periodUserList = userDataList;\r\n    })\r\n  }\r\n\r\n  loadSelectedDate = async (userList, fromDate, toDate) => {\r\n    const dateSelects = [];\r\n    const querySnapshot = await db.collection(\"selectlist\")\r\n      .where(\"user\", \"in\", userList)\r\n      .where(\"date\", \">=\", fromDate)\r\n      .where(\"date\", \"<=\", toDate)\r\n      .get();\r\n    querySnapshot.forEach((doc) => {\r\n      dateSelects.push(doc.data());\r\n    });\r\n    return dateSelects;\r\n  }\r\n\r\n  saveSelectList = async (user, dateSl) => {\r\n    this.loading = true;\r\n    const docPath = `${user}_${format(dateSl, \"dd-MM-yyyy\")}`;\r\n    const filterTasks = this.taskList\r\n      .filter((x) => x.isSelected)\r\n      .map((task) => ({\r\n        taskId: task.id,\r\n        isCompleted: task.isCompleted,\r\n        comments: task.comments,\r\n        attachments: task.attachments?.map(x=> ({\r\n          ref: x.ref,\r\n          url: x?.url?? \"\"\r\n        }))\r\n      }));\r\n    await db.collection(\"selectlist\").doc(docPath).set({\r\n      date: dateSl,\r\n      lastUpdate: new Date(),\r\n      user,\r\n      selectedTasks: filterTasks,\r\n    });\r\n    runInAction(() => {\r\n      this.loading = false;\r\n    });\r\n  }\r\n\r\n  @computed get sortedTaskList() {\r\n    return orderBy(this.taskList, [\"isSelected\", \"id\"], [\"desc\", \"asc\"]);\r\n  }\r\n\r\n  // can be called as `this.total`\r\n  @computed get totalCompleted() {\r\n    return this.taskList.filter((x) => x.isCompleted).length;\r\n  }\r\n\r\n  // can be called as `this.total`\r\n  @computed get totalSelected() {\r\n    return this.taskList.filter((x) => x.isSelected).length;\r\n  }\r\n\r\n  @action saveSelectTask(id) {\r\n\r\n  }\r\n\r\n  migrate = async() => {\r\n    db.collection(\"todolist\")\r\n      .doc(\"default\");\r\n  }\r\n}\r\n\r\nexport default TaskStore;\r\n","import { observable } from \"mobx\";\r\nimport { db } from \"../firebase/config\";\r\nimport \"../utils/Extensions\";\r\n\r\nclass SelectTaskStore {\r\n    @observable selectedTasks = [];\r\n\r\n    async migrateData(user,date){\r\n        const dateStr = date.format();\r\n        const selectDoc = await db.collection(\"selectlist\" + user).doc(dateStr).get();\r\n        const doneDoc = await db.collection(\"donelist\" + user).doc(dateStr).get();\r\n        let newItems = [];\r\n        let doneTasks  = [];\r\n        const docPath = `${user}_${dateStr}`;\r\n        if (doneDoc.exists && doneDoc.data().doneTasks) {\r\n            doneDoc.data().doneTasks.forEach(taskId => {\r\n              doneTasks.push(taskId);\r\n            });\r\n          }\r\n        if (selectDoc.exists && selectDoc.data().selectedTasks) {\r\n            selectDoc.data().selectedTasks.forEach(taskId => {\r\n                newItems.push({\r\n                    id: `${docPath}_${taskId}`,\r\n                    taskId: taskId,\r\n                    date: date,\r\n                    user,\r\n                    isCompleted: doneTasks.includes(taskId),\r\n                    attachments: []\r\n                });\r\n            });\r\n        }\r\n        db.collection(\"selectlist\").doc(docPath).set({\r\n            lastUpdated: new Date(),\r\n            selectedTasks: newItems\r\n        });\r\n    }\r\n}\r\n\r\nexport default SelectTaskStore;","import { addDays, format } from \"date-fns\";\r\nimport orderBy from \"lodash/orderBy\";\r\nimport { action, computed, makeAutoObservable, runInAction } from \"mobx\";\r\nimport { Platform } from \"react-native\";\r\nimport { db, storage } from \"../firebase/config\";\r\nimport TaskItem from \"../models/TaskItem\";\r\nimport \"../utils/Extensions\";\r\n\r\nclass StorageStore {\r\n\r\n  loading = false;  \r\n\r\n  constructor () {\r\n    console.log(\"Initialize TaskStore...\");\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  addAttachments = async(taskItem,file,cbAction) => {\r\n    this.loading = true;\r\n    let path = this.getPlatformPath(file).value;\r\n    let name = this.getFileName(file.fileName,path);\r\n    const filePath = \"attachFiles/\" + name;\r\n    runInAction(()=> {\r\n      const fileAttach = {value: path, ref: filePath};\r\n      taskItem.attachments.push(fileAttach);\r\n    });\r\n    runInAction( async()=> {\r\n      this.loading = false;\r\n      const response = await fetch(path);\r\n      const blob = await response.blob();\r\n      \r\n      const ref = storage.ref().child(filePath);\r\n      const taskUpload = await ref.put(blob);\r\n\r\n      const url = await ref.getDownloadURL();\r\n      console.log(url);\r\n      taskItem.attachments[taskItem.attachments.length - 1].url = url;\r\n      if (cbAction) cbAction();\r\n    })\r\n  }\r\n\r\n  getFileName = (name, path) => {\r\n    if (name != null) { return name; }\r\n\r\n    if (Platform.OS === \"ios\") {\r\n        path = \"~\" + path.substring(path.indexOf(\"/Documents\"));\r\n    }\r\n    if (Platform.OS == \"web\") {\r\n      const date = new Date();\r\n      return format(date, \"yyMMdd_\") + Date.now() ;\r\n    }\r\n    return path.split(\"/\").pop();\r\n  }\r\n\r\n  /**\r\n   * Get platform specific value from response\r\n   */\r\n  getPlatformPath = ({ path, uri }) => {\r\n      return Platform.select({\r\n          android: {value: path },\r\n          web: {value: uri},\r\n          ios: {value: uri }\r\n      });\r\n  }\r\n\r\n  getPlatformURI = (imagePath) => {\r\n      let imgSource = imagePath;\r\n      if (isNaN(imagePath)) {\r\n          imgSource = { uri: this.state.imagePath };\r\n          if (Platform.OS == \"android\") {\r\n              imgSource.uri = \"file:///\" + imgSource.uri;\r\n          }\r\n      }\r\n      return imgSource;\r\n  }\r\n\r\n}\r\n\r\nexport default StorageStore;\r\n","import { computed, makeAutoObservable } from \"mobx\";\r\n\r\nclass CommonStore {\r\n  \r\n  user = null;\r\n\r\n  userList = [{role: 'child',name: 'Susu', email: 'tulamuaban@gmail.com'},{role: 'child', name: 'Nemo', email: 'dragon.tvq@gmail.com'},{role: 'admin', name: 'Dad', email: 'quyetvv@gmail.com'}]\r\n\r\n  constructor (){\r\n    console.log(\"Initialize CommonStore...\");\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  @computed get userName() {    \r\n    return this.userList.find(x=> x.email == this.user?.email)?.name;\r\n  }\r\n\r\n  @computed get userRole() {\r\n    return this.userList.find(x=> x.email == this.user?.email)?.role;\r\n  }\r\n\r\n  @computed get otherName() {\r\n    return this.userList.find(x=> x.name !== this.userName && x.name != 'Dad')?.name;\r\n  }\r\n\r\n}\r\n\r\nexport default CommonStore;\r\n","import { endOfDay, format } from \"date-fns\";\r\nimport startOfDay from \"date-fns/startOfDay\";\r\nimport { computed, makeAutoObservable, runInAction } from 'mobx';\r\nimport { db, storage } from \"../firebase/config\";\r\nimport TransactionDetail from '../models/TransactionDetail';\r\n\r\nclass MoneyStore {  \r\n\r\n  loading: boolean = true;\r\n  balance = null;\r\n  transToday: [TransactionDetail] = [];\r\n\r\n  constructor (){\r\n    console.log(\"Initialize CommonStore...\");\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  loadBalanceAndTrans = async(user,datetime) => {\r\n    await this.loadBalance(user);\r\n    await this.loadTrans([user],datetime);\r\n  }\r\n\r\n  loadBalance = async (user) => {\r\n    this.loading = true;\r\n    const userDoc = await db.collection(\"money\").doc(`${user}_balance`).get();\r\n    if (userDoc.exists){\r\n      this.balance = userDoc.data();\r\n    } else {\r\n      this.balance = {\r\n        total: 0,\r\n        lastUpdate: new Date(),\r\n        target: 20000000\r\n      };\r\n      await db.collection(\"money\").doc(`${user}_balance`).set(this.balance);\r\n    }\r\n    this.loading = false;\r\n  }\r\n\r\n  @computed get completedPercent(){\r\n    return this.balance.total/this.balance.target*100;\r\n  }\r\n\r\n  addTrans = async (user,transDetail: TransactionDetail) => {\r\n    this.loading = true;\r\n    const date = format(transDetail.datetime, \"dd-MM-yyyy\");\r\n\r\n    // save transaction\r\n    await db.collection(\"money\").doc(`${user}_${date}_${transDetail.id}`).set(transDetail);\r\n\r\n    // commit to balance\r\n    this.balance.total += transDetail.value;\r\n    await db.collection(\"money\").doc(`${user}_balance`).set({\r\n      total: this.balance.total,\r\n      lastUpdate: new Date(),\r\n      target: this.balance.target?? 20000000\r\n    });\r\n\r\n    runInAction(()=>{\r\n      this.transToday.push(transDetail);\r\n      this.loading = false;\r\n    })\r\n  }\r\n\r\n  loadTrans = async (users,datetime) => {\r\n    this.loading = true;\r\n    this.transToday = [];\r\n\r\n    const fromDate = startOfDay(datetime);\r\n    const toDate = endOfDay(datetime);\r\n    const moneyTrans = await db.collection(\"money\")\r\n      .where(\"user\", \"in\", users)\r\n      .where(\"datetime\", \">=\", fromDate)\r\n      .where(\"datetime\", \"<=\", toDate).get();    \r\n      moneyTrans.forEach(trans => {\r\n        this.transToday.push(trans.data());\r\n      });\r\n      this.loading = false;\r\n  }\r\n\r\n}\r\n\r\nexport default MoneyStore;\r\n","import React from 'react';\r\nimport TaskStore from './TaskStore';\r\nimport SelectTaskStore from './SelectTaskStore';\r\nimport StorageStore from './StorageStore';\r\nimport CommonStore from './CommonStore';\r\nimport MoneyStore from './MoneyStore';\r\n\r\nclass RootStore {\r\n    taskStore: TaskStore;\r\n    selectTaskStore: ReportTaskStore;\r\n    storageStore: StorageStore;\r\n    commonStore: CommonStore;\r\n    moneyStore: MoneyStore;\r\n    constructor() {\r\n        this.taskStore = new TaskStore(this);\r\n        this.selectTaskStore = new SelectTaskStore(this);\r\n        this.storageStore = new StorageStore(this);\r\n        this.commonStore = new CommonStore(this);\r\n        this.moneyStore = new MoneyStore(this);\r\n    }\r\n}\r\n\r\nconst rootStore = new RootStore();\r\n\r\nexport default rootStore;\r\n\r\nconst storesContext = React.createContext({ ...rootStore });\r\nexport const useStores = () => React.useContext(storesContext);\r\n\r\n","\r\nimport { View } from \"native-base\";\r\nimport React from \"react\";\r\n\r\n\r\nconst ProgressBar = (props) => {\r\n  const { bgcolor, completed } = props;\r\n\r\n  const containerStyles = {\r\n    height: 20,\r\n    width: '95%',\r\n    backgroundColor: \"#e0e0de\",\r\n    borderRadius: 50,\r\n    margin: 30\r\n  }\r\n\r\n  const fillerStyles = {\r\n    height: '100%',\r\n    width: `${completed}%`,\r\n    backgroundColor: bgcolor,\r\n    borderRadius: 'inherit',\r\n    textAlign: 'right'\r\n  }\r\n\r\n  const labelStyles = {\r\n    padding: 5,\r\n    color: 'white',\r\n    fontWeight: 'bold'\r\n  }\r\n\r\n  return (\r\n    <View style={containerStyles}>\r\n      <View style={fillerStyles}>\r\n        <View style={labelStyles}>{`${completed}%`}</View>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;","import { observable, computed, action, makeAutoObservable } from \"mobx\";\r\nimport { TaskStore } from 'stores/TaskStore';\r\n\r\nexport default class TransactionDetail {\r\n    id;\r\n    awardName;\r\n    size;\r\n    type;\r\n    value;\r\n    datetime;\r\n    user;\r\n    attachments;\r\n    comments;\r\n\r\n    constructor(id, awardName, size, type, value, datetime, user, attachments = [],comments = []) {\r\n\t\tthis.id = id;\r\n        this.awardName= awardName;\r\n        this.size = size;\r\n        this.value = value;\r\n        this.type = type;\r\n        this.datetime = datetime;\r\n        this.user = user;\r\n        this.attachments = attachments;\r\n        this.comments = comments;\r\n        makeAutoObservable(this);\r\n\t}\r\n}","import { FontAwesome, FontAwesome5 } from \"@expo/vector-icons\";\r\nimport { Button, Text, View } from \"native-base\";\r\nimport React, { useState } from \"react\";\r\nimport { StyleSheet } from \"react-native\";\r\nimport { TextInput } from \"react-native-gesture-handler\";\r\nimport TransactionDetail from \"../models/TransactionDetail\";\r\n\r\n\r\nconst EvalDetail = (props) => {\r\n\r\n    const MinAwardValue = 10000;\r\n    const [commentValue, setCommentValue] = useState(\"\");\r\n    const [awardValue, setAwardValue] = useState(10000);\r\n    const [iconSize, setIconSize] = useState(30);\r\n\r\n    const submitTranDetail = () => {\r\n      const tranDetail: TransactionDetail = new TransactionDetail(Date.now(), getIconName(),iconSize,\"Award\",awardValue,new Date(),props.user, [],[commentValue]);\r\n      if (props.onSubmitTranDetail) {\r\n        props.onSubmitTranDetail(tranDetail);\r\n      }\r\n    };\r\n\r\n    const getIconName = () => {\r\n      let icon = \"\";\r\n      if (awardValue > 0) {\r\n        icon = awardValue  <= 10000? \"star\": (awardValue > 10000 && awardValue < 40000 ? \"heart\": \"medal\");\r\n      } else {\r\n        icon = awardValue  >= -10000? \"surprise\": (awardValue < -10000 && awardValue > -40000? \"sad-cry\": \"angry\")\r\n      }\r\n      return icon;\r\n    };\r\n\r\n    const changeValue = (delta) => {\r\n        if (awardValue == MinAwardValue && delta < 0) {\r\n          setAwardValue(-10000);\r\n        }\r\n        else if (awardValue == -MinAwardValue && delta > 0) {\r\n          setAwardValue(10000);\r\n        } else {\r\n          if (awardValue > 0 ) {\r\n            setIconSize(iconSize + delta);\r\n          } else {\r\n            setIconSize(iconSize - delta);\r\n          }\r\n\r\n          // tăng tốc tiền thường 5 lần\r\n          if (awardValue >= 50000 || awardValue <= -50000) {\r\n            delta = delta * 5;\r\n          }\r\n          setAwardValue(awardValue + delta * 1000);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <View style={{ flexDirection: \"column\" }}>\r\n            <View style={{flexDirection: \"row\"}}>\r\n              <FontAwesome5 name={getIconName()} style={{fontSize:iconSize, marginLeft: 20}} color={awardValue > 0 ? \"rgb(63, 81, 181)\": \"#786d6c\"} />              \r\n              <FontAwesome5 name=\"plus\" style={{fontSize: 24 ,marginLeft: 30}} onPress={e => changeValue(10)} />\r\n              <FontAwesome5 name=\"minus\" style={{fontSize: 24, marginLeft: 10}} onPress={e => changeValue(-10)} />\r\n              <TextInput style={styles.awardValue} placeholder=\"Giá trị thưởng\" value={awardValue} onChangeText={setAwardValue} ></TextInput>\r\n            </View>            \r\n            <TextInput style={styles.input} placeholder=\"Thêm nhận xét...\" value={commentValue} onChangeText={setCommentValue} ></TextInput>\r\n            <Button style={{margin: 10}} onPress={() => submitTranDetail()}>\r\n                <Text style={{fontSize:16}} > Xác nhận </Text>\r\n            </Button>\r\n        </View>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  baseText: {\r\n    fontSize: 11,\r\n  },\r\n  titleText: {\r\n    fontSize: 15,\r\n    fontWeight: \"bold\"\r\n  },\r\n  awardValue: {\r\n    margin: 20,\r\n    height: 20,\r\n    marginTop: 0,\r\n    fontSize: 16,\r\n    fontStyle: \"italic\",\r\n    borderWidth: 0,\r\n    borderBottomColor: \"#000000\",\r\n    borderBottomWidth: 1,\r\n    borderColor: \"rgb(201, 201, 201)\"\r\n  },\r\n  input: {\r\n    height: 40,\r\n    width: 300,\r\n    maxWidth: 500,\r\n    marginLeft: 20,\r\n    fontSize: 16,\r\n    fontStyle: \"italic\",\r\n    borderWidth: 0,\r\n    borderBottomColor: \"#000000\",\r\n    borderBottomWidth: 1,\r\n    borderColor: \"rgb(201, 201, 201)\"\r\n  }\r\n});\r\n\r\nexport default EvalDetail;","import { FontAwesome5 } from '@expo/vector-icons';\r\nimport { format } from \"date-fns\";\r\nimport { Button, List, ListItem, Spinner, Text, View } from \"native-base\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { StyleSheet } from \"react-native\";\r\nimport { TextInput } from 'react-native-gesture-handler';\r\nimport { useStores } from \"../stores/RootStore\";\r\nimport TransactionDetail from '../models/TransactionDetail';\r\nimport ProgressBar from './ProgressBar';\r\nimport EvalDetail from './EvalDetail';\r\nimport { toJS } from 'mobx';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst EvalResults = (props) => {\r\n    \r\n    const {commonStore, moneyStore} = useStores();\r\n\r\n    useEffect(()=>{\r\n        moneyStore.loadBalanceAndTrans(props.user,props.date);\r\n    },[props.user,props.date, props.tabIndex]);\r\n\r\n    const submitTranDetail = (transDetail: TransactionDetail) => {\r\n        moneyStore.addTrans(props.user,toJS(transDetail));\r\n    }\r\n\r\n    const renderAward = (tran: TransactionDetail) => {\r\n        return (\r\n            <View style={{flexDirection: 'column', margin: 10}}>\r\n                <FontAwesome5 name={tran.awardName} style={{fontSize:tran.size}} color={tran.value > 0 ? \"red\": \"#786d6c\"} />\r\n                <Text> {(tran.value/1000).toFixed(0)}k </Text>\r\n            </View>\r\n        )\r\n    }\r\n\r\n    return moneyStore.loading && !moneyStore.balance ? (<Spinner color=\"green\" />) : (\r\n        <View style={{ flexDirection: \"column\", width: \"100%\"}}>\r\n          <View style={{}}>\r\n              <Text style={{color: \"#1d4d99\"}}> Total balance: {(moneyStore.balance.total/1000).toFixed(0)}k/{(moneyStore.balance.target/1000).toFixed(0)}k</Text>\r\n              <ProgressBar bgcolor={'#eb4034'} completed={moneyStore.completedPercent.toFixed(2)} />\r\n          </View>\r\n          <View>\r\n            <Text style={{color: \"#1d4d99\"}}> Results: </Text>\r\n            <View style={{flexDirection: \"row\"}}>\r\n            {\r\n                moneyStore.transToday.map((tran) => (\r\n                    renderAward(tran)\r\n                ))\r\n            }\r\n            </View>\r\n          </View>\r\n          {commonStore.userRole == 'admin' &&\r\n            <View style={{flexDirection: \"row\", marginTop: 20}}>\r\n                <Text style={{color: \"#1d4d99\"}}> Evaluation: </Text>\r\n                <EvalDetail user={props.user} onSubmitTranDetail={submitTranDetail}></EvalDetail>\r\n            </View>\r\n          }\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  baseText: {\r\n    fontSize: 11,\r\n  },\r\n  titleText: {\r\n    fontSize: 15,\r\n    fontWeight: \"bold\"\r\n  },\r\n  input: {\r\n    height: 40,\r\n    width: 300,\r\n    maxWidth: 500,\r\n    marginLeft: 20,\r\n    fontSize: 16,\r\n    fontStyle: \"italic\",\r\n    borderWidth: 0,\r\n    borderBottomColor: '#000000',\r\n    borderBottomWidth: 1,\r\n    borderColor: \"rgb(201, 201, 201)\"\r\n  }\r\n});\r\n\r\nexport default observer(EvalResults);","import { useNavigation, useRoute, useIsFocused  } from \"@react-navigation/native\";\r\nimport { useStores } from \"../stores/RootStore\";\r\nimport TaskItem from '../models/TaskItem';\r\nimport { FontAwesome } from '@expo/vector-icons';\r\nimport { TextInput } from 'react-native-gesture-handler';\r\nimport React, { useState } from \"react\";\r\nimport { Button, Text, View } from \"native-base\";\r\nimport { StyleSheet } from \"react-native\";\r\nimport { format } from \"date-fns\";\r\n\r\nconst CommentList = (props) => {\r\n    \r\n    const [commentValue, setCommentValue] = useState(\"\");\r\n    const {taskStore, storageStore, commonStore} = useStores();\r\n\r\n    const taskItem: TaskItem = props.item;\r\n\r\n    const addComment = () => {\r\n      taskItem.comments.push({id: Date.now(), text: commonStore.userName + ':' + commentValue});\r\n      setCommentValue(\"\");\r\n      taskStore.saveSelectList(props.user,props.date);\r\n    };\r\n\r\n    return (\r\n        <View style={{ width: 400, marginLeft: 20, marginTop: 20, borderWidth: 1, borderColor: \"rgb(201, 201, 201)\" }}>\r\n          {\r\n              taskItem.comments?.map((cmt,i) => (\r\n                  <Text style={{ fontStyle: \"italic\", color: i % 2 == 0? \"#3962a3\": \"#39a372\" }} key={cmt.id}> {format(new Date(cmt.id),'HH:mm')}: {cmt.text}</Text>\r\n              ))\r\n          }\r\n          <View style={{flexDirection: \"row\", marginTop: 20}}>\r\n            <TextInput style={styles.input} placeholder=\"Write to here...\" value={commentValue} onChangeText={setCommentValue} ></TextInput>\r\n            <Button style={{marginLeft: 10}} transparent onPress={() => addComment()}>\r\n            <FontAwesome name=\"send-o\" style={{fontSize:25}} color=\"rgb(63, 81, 181)\" />\r\n            </Button>\r\n          </View>\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  baseText: {\r\n    fontSize: 11,\r\n  },\r\n  titleText: {\r\n    fontSize: 15,\r\n    fontWeight: \"bold\"\r\n  },\r\n  input: {\r\n    height: 40,\r\n    width: 300,\r\n    maxWidth: 500,\r\n    marginLeft: 20,\r\n    fontSize: 16,\r\n    fontStyle: \"italic\",\r\n    borderWidth: 0,\r\n    borderBottomColor: '#000000',\r\n    borderBottomWidth: 1,\r\n    borderColor: \"rgb(201, 201, 201)\"\r\n  }\r\n});\r\n\r\nexport default CommentList;","import { Body, Button, ListItem, Right, Switch, Text, Spinner } from 'native-base';\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Image, Platform, StyleSheet, TouchableWithoutFeedback, View } from \"react-native\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport * as ImagePicker from \"expo-image-picker\";\r\nimport { useNavigation, useRoute, useIsFocused  } from \"@react-navigation/native\";\r\nimport { useStores } from \"../stores/RootStore\";\r\nimport TaskItem from '../models/TaskItem';\r\nimport { FontAwesome } from '@expo/vector-icons';\r\nimport { TextInput } from 'react-native-gesture-handler';\r\nimport CommentList from './CommentList';\r\n\r\n\r\nconst TaskListItem = (props) => {\r\n  const taskItem: TaskItem = props.taskItem;\r\n  const navigation = useNavigation();\r\n  const route = useRoute();\r\n  const {storageStore} = useStores();\r\n\r\n  const [showComment, setShowComment] = useState(false);\r\n\r\n  const showImagePicker = async (taskItem) => {\r\n    // ask the user for the permission to access the media library\r\n    const permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();\r\n\r\n    if (permissionResult.granted === false) {\r\n      alert(\"You've refused to allow this appp to access your photos!\");\r\n      return;\r\n    }\r\n\r\n    const result = await ImagePicker.launchImageLibraryAsync();\r\n\r\n    if (result.cancelled) {\r\n      console.log(\"User cancelled image picker\");\r\n    } else {\r\n      storageStore.addAttachments(taskItem, result, cbAttachAction);\r\n      if (props.onAddFile){\r\n        props.onAddFile();\r\n      }\r\n    }\r\n  };\r\n  \r\n  \r\n  const takePicture = (taskItem) => {\r\n    navigation.navigate(\"CameraScreen\",{ sourceScreen: \"HomeScreen\", sourceData: {id: taskItem.id, user: props.user, taskItem: taskItem } });\r\n  };\r\n  const attachments = (taskItem) => {\r\n    return taskItem.attachments.map(attachItem => (              \r\n      <Image source={{uri: attachItem.value?? attachItem.url}} style={{width: 50,height: 50, marginLeft: 20}}></Image>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <ListItem key={taskItem.id} style={{ backgroundColor: taskItem.isSelected? \"#cde1f9\": \"#fcfcfc\"}}>\r\n      <Body style={{flexDirection: \"column\"}}>\r\n        <View style={{flexDirection: \"row\"}}>\r\n          <View>\r\n            <TouchableWithoutFeedback onPress={() => props.onSelectItem(taskItem)}>\r\n              <View>\r\n                <Text style={styles.titleText}>{taskItem.id}. {taskItem.task}</Text>\r\n                <Text style={styles.baseText}>Mục: {taskItem.cat} </Text>\r\n                { taskItem.weekCount > 0 ?\r\n                <Text style={{fontSize: 13,color: taskItem.weekCount > taskItem.freqPerWeek? \"red\": \"\"}}>Đã chọn: {taskItem.weekCount} lần\r\n                  (Được chọn {taskItem.freqPerWeek} lần) </Text>\r\n                : <Text style={{fontSize: 13}}>Được chọn {taskItem.freqPerWeek} lần </Text> }\r\n              </View>\r\n            </TouchableWithoutFeedback>\r\n          </View>\r\n          <View style={{flexDirection: \"row\"}}>\r\n          {\r\n            attachments(taskItem)\r\n          }\r\n          {\r\n            storageStore.loading && route.params?.id == taskItem.id && <View><Spinner/><Text>Đang tải ảnh lên... </Text></View>\r\n          }\r\n          </View>\r\n        </View>\r\n        <View>\r\n          {\r\n            showComment && <CommentList item={taskItem} user={props.user} date={props.date}></CommentList>\r\n          }\r\n        </View>\r\n      </Body>\r\n      { taskItem.isSelected &&\r\n      <Right style={{width:250, minWidth: 200, maxWidth:300, flexDirection: \"row\", justifyContent: \"space-evenly\", alignContent: \"flex-start\", alignSelf: \"flex-start\"}}>\r\n          <View style={styles.taskButton}>\r\n            <Switch value={taskItem.isCompleted} onValueChange={(e)=> { props.onDoneItem(taskItem);}}  />\r\n          </View>\r\n          <Button style={styles.taskButton} transparent onPress={() => setShowComment(!showComment)}>\r\n              <FontAwesome name=\"comment\" style={{fontSize:25}} color={taskItem.comments.length > 0 ? \"red\": \"rgb(63, 81, 181)\"} />\r\n              { taskItem.comments.length > 0 && <Text style={{fontSize:14, fontWeight: \"bold\", color: \"white\", position: \"absolute\"}}>{taskItem.comments.length}</Text>}\r\n          </Button>\r\n          <Button style={styles.taskButton} transparent onPress={() => takePicture(taskItem)} >\r\n              <FontAwesome style={{fontSize:25}} name=\"camera\" color=\"rgb(63, 81, 181)\" />\r\n          </Button>\r\n          <Button style={styles.taskButton} transparent onPress={() => showImagePicker(taskItem)}>\r\n              <FontAwesome style={{fontSize:25}} name=\"cloud-upload\" color=\"rgb(63, 81, 181)\" />\r\n          </Button>\r\n      </Right>\r\n      }\r\n    </ListItem>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  baseText: {\r\n    fontSize: 11,\r\n  },\r\n  titleText: {\r\n    fontSize: 15,\r\n    fontWeight: \"bold\"\r\n  },\r\n  input: {\r\n    height: 40,\r\n    maxWidth: 500,\r\n    marginLeft: 20,\r\n    fontSize: 18,\r\n    borderWidth: 1,\r\n    borderColor: \"rgb(201, 201, 201)\"\r\n  },\r\n  taskButton: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignContent: \"center\",\r\n    alignSelf: \"center\"\r\n  }\r\n});\r\n\r\n\r\nexport default observer(TaskListItem);","import { FontAwesome } from \"@expo/vector-icons\";\r\nimport { useRoute } from \"@react-navigation/native\";\r\nimport { addDays, format } from \"date-fns\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Body, Button, Card, CardItem, List, Spinner, Text } from \"native-base\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { ScrollView, StyleSheet, View } from \"react-native\";\r\nimport TaskItem from \"../models/TaskItem\";\r\nimport { useStores } from \"../stores/RootStore\";\r\nimport EvalResults from \"./EvalResults\";\r\nimport TaskListItem from \"./TaskListItem\";\r\n\r\n\r\nconst TodayTasksScreen = (props) => {\r\n  const [dateSl,setDate] = useState(new Date());  \r\n  const {taskStore, commonStore, storageStore} = useStores();\r\n  const route = useRoute();\r\n  \r\n  useEffect(()=> {\r\n    taskStore.loadTaskList(props.user,dateSl);\r\n  },[props.tabIndex, props.user,dateSl]);\r\n\r\n  const cbAttachAction = ()=> {\r\n    taskStore.saveSelectList(props.user,dateSl);\r\n  }\r\n  useEffect(() => {\r\n    if (route.params?.photo &&  route.params.sourceData?.user == props.user) {\r\n      storageStore.addAttachments(route.params.sourceData?.taskItem, route.params.photo, cbAttachAction);\r\n    }\r\n  }, [route.params?.photo]);\r\n\r\n  const onSelectItem = (task: TaskItem) => {\r\n    task.toggleSelect();\r\n    taskStore.saveSelectList(props.user,dateSl);\r\n  };\r\n\r\n  const SaveSelectList = async() => {\r\n    await taskStore.saveSelectList(props.user,dateSl);\r\n  };\r\n\r\n  const onDoneItem = (task: TaskItem) => {\r\n    task.toggleComplete();\r\n    taskStore.saveSelectList(props.user,dateSl);\r\n  };\r\n\r\n  const onAddFile = (e) => {\r\n    taskStore.saveSelectList(props.user,dateSl);\r\n  };\r\n\r\n  const SelectDay = (val) => {\r\n    setDate(addDays(dateSl, val));\r\n  };\r\n\r\n  return (\r\n     <ScrollView>\r\n        <View style={{flexDirection: \"column\"}}>\r\n          <View style={{flexDirection: \"row\", justifyContent: \"space-around\", marginTop: 20, marginBottom: 20 }}>\r\n              <Button transparent onPress={()=> SelectDay(-1)}>\r\n                <FontAwesome style={{fontSize:35}} name=\"backward\" color=\"rgb(33, 150, 243)\" />\r\n             </Button>\r\n             <View style={{flexDirection: \"row\", justifyContent: 'center'}}>\r\n              <Text style={{fontSize: 18,fontWeight: \"bold\", color: \"red\"}} > {format(dateSl,\"iiii, dd-MM-yyyy\")} </Text>\r\n              {taskStore.loading && <Spinner style={{height: 35}}/>}\r\n             </View>\r\n             <Button transparent onPress={()=> SelectDay(1)}>\r\n              <FontAwesome style={{fontSize:35}} name=\"forward\" color=\"rgb(33, 150, 243)\" />\r\n             </Button>\r\n          </View>\r\n        </View>        \r\n        <Card>\r\n            <CardItem>\r\n              <Body>\r\n                <EvalResults user={props.user} date={dateSl} tabIndex={props.tabIndex}></EvalResults>\r\n              </Body>\r\n            </CardItem>\r\n        </Card>        \r\n        {taskStore.sortedTaskList.length > 0 &&\r\n        (\r\n          <View style={{flexDirection: \"column\"}}>\r\n            <Text style={styles.result} >\r\n              {props.user} đã chọn {taskStore.totalSelected} việc. {\"\\r\\n\"}Đã hoàn thành: {taskStore.totalCompleted} việc</Text>\r\n            <Text style={{ fontSize: 18, fontWeight: \"bold\", marginLeft: 15, marginBottom: 20}}>Danh sách công việc: </Text>\r\n            <List>\r\n            {\r\n              taskStore.sortedTaskList.map((taskItem, i) => (\r\n                <TaskListItem key={taskItem.id} taskItem={taskItem} date={dateSl} onSelectItem={onSelectItem} onDoneItem={onDoneItem} onAddFile={onAddFile} {...props} />\r\n              ))\r\n            }\r\n            </List>\r\n          </View>\r\n        )}\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({  \r\n  result: {\r\n    marginLeft: \"10px\",\r\n    marginBottom: 20,\r\n    fontSize: 22,\r\n    fontWeight: \"bold\",\r\n    color: \"red\"\r\n  }\r\n});\r\n\r\n\r\nexport default observer(TodayTasksScreen);","import { addDays } from \"date-fns\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { List, ListItem, Spinner, Text } from \"native-base\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Button, ScrollView, StyleSheet, View } from \"react-native\";\r\nimport TaskItem from \"../models/TaskItem\";\r\nimport { useStores } from \"../stores/RootStore\";\r\n\r\n\r\nconst KidReport = (props) => {\r\n  const [dateSl,setDate] = useState(new Date());\r\n  const { taskStore } = useStores();\r\n\r\n  useEffect(()=> {\r\n    const weekFromDate = addDays(dateSl, dateSl.getDay() > 0? 1 -dateSl.getDay(): -6);\r\n    const weekToDate = addDays(dateSl, dateSl.getDay() > 0? 7 - dateSl.getDay(): 0);\r\n    taskStore.loadUserPeriod([\"Susu\",\"Nemo\"], weekFromDate, weekToDate);\r\n  },[dateSl]);\r\n\r\n  const onSelectItem = (task: TaskItem) => {\r\n    task.toggleSelect();\r\n  };\r\n\r\n  const SaveSelectList = async() => {\r\n    await taskStore.saveSelectList(props.user,dateSl);\r\n  };\r\n\r\n  const onDoneItem = (task: TaskItem) => {\r\n    task.toggleComplete();\r\n  };\r\n\r\n  const SelectDay = (val) => {\r\n    setDate(addDays(dateSl, val));\r\n  };\r\n\r\n  return (\r\n     <ScrollView>\r\n        <View style={{flexDirection: \"column\"}}>\r\n          <View style={{flexDirection: \"row\", justifyContent: \"space-around\", marginTop: 20, marginBottom: 20 }}>\r\n             <Button style={{size: \"\"}} title=\"<< Hôm qua\" onPress={()=> SelectDay(-1)}/>\r\n             <Button style={{size: \"\"}} title=\"Lưu việc đã chọn\" onPress={()=> SaveSelectList()}></Button>\r\n             <Button style={{size: \"\"}} title=\"Hôm sau >>\" onPress={()=> SelectDay(1)}/>\r\n          </View>\r\n        </View>\r\n        {taskStore.loading ? (<Spinner/> ):\r\n        (\r\n          <View style={{flexDirection: \"column\"}}>\r\n              {taskStore.periodUserList.map(item => \r\n                (<View>\r\n                    <Text style={{fontSize: 20}}> {item.user} </Text>\r\n                    <List>\r\n                      {\r\n                        item.dataDates.map(date=>(\r\n                          <ListItem>\r\n                            <Text> Ngày: {date.date}</Text>\r\n                            <Text> Đăng ký: {date.selected}</Text>\r\n                            <Text style={{fontSize: 18, color: date.selected > date.completed? 'red': 'black'}}> Hoàn thành: {date.completed}</Text>\r\n                          </ListItem>\r\n                        ))\r\n                      }\r\n                    </List>\r\n                </View>)\r\n              )}\r\n          </View>\r\n        )}\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  result: {\r\n    marginLeft: \"10px\",\r\n    marginBottom: 20,\r\n    fontSize: 18,\r\n    fontWeight: \"bold\",\r\n    color: \"red\"\r\n  }\r\n});\r\n\r\n\r\nexport default observer(KidReport);","import \"react-native-gesture-handler\";\r\nimport { Body, Button, Container, Header, Icon, Left, Right, Spinner, Tab, Tabs, Title } from \"native-base\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\r\nimport TodayTasksScreen from \"components/TodayTasks\";\r\nimport { ScrollView } from \"react-native\";\r\nimport KidReport from \"@components/KidReport\";\r\nimport {auth} from 'firebase/config';\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport { FontAwesome } from '@expo/vector-icons';\r\nimport { useStores } from '../../stores/RootStore';\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nconst HelloWorldApp = (props) => {\r\n\r\n  // Set an initializing state whilst Firebase connects\r\n  const [initializing, setInitializing] = useState(true);\r\n  const navigation = useNavigation();  \r\n  const  { commonStore } = useStores();\r\n\r\n  // Handle user state changes\r\n  const onAuthStateChanged = (user) => {\r\n    if (!user){\r\n      navigation.navigate('LoginScreen');      \r\n    }\r\n    commonStore.user = user;\r\n    if (initializing) setInitializing(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const subscriber = auth.onAuthStateChanged(onAuthStateChanged);\r\n    return subscriber; // unsubscribe on unmount\r\n  }, []);  \r\n\r\n  // we will re-render content on tab every time it is active.\r\n  // we could not keep it because the store attached to it will contain data\r\n  // from another user. If we could change store to contain multi user. \r\n  // that will be acceptable to keep content\r\n  const [tabIndex,setTab] = useState(0);\r\n  const tabChanged = (e)=> {\r\n    console.log(e);\r\n    setTab(e.i);\r\n  };\r\n\r\n  const logout = () => {\r\n    commonStore.user = null;\r\n    navigation.navigate('LoginScreen');\r\n  }\r\n\r\n  return (\r\n    <SafeAreaProvider>\r\n      <Container>\r\n        <ScrollView>\r\n        <Header>\r\n          <Left>\r\n            <Button transparent>\r\n              <Icon name=\"menu\" />\r\n            </Button>\r\n          </Left>\r\n          <Body>\r\n            <Title>SUMO DAYS</Title>\r\n          </Body>\r\n          <Right>\r\n            <Button transparent onPress={logout}>\r\n              <FontAwesome size={24} color=\"white\" name=\"sign-out\" />\r\n            </Button>\r\n          </Right>\r\n        </Header>\r\n        {!commonStore.userName? (<Spinner color=\"green\" />) :\r\n        (commonStore.userRole !== 'admin' ? (\r\n        <Tabs onChangeTab={tabChanged}>\r\n          <Tab heading={commonStore.userName}>\r\n            <TodayTasksScreen tabIndex={tabIndex} user={commonStore.userName}/>\r\n          </Tab>\r\n          <Tab heading=\"Dad\">\r\n            <KidReport index={tabIndex}></KidReport>\r\n          </Tab>\r\n        </Tabs>\r\n        ): (\r\n        <Tabs onChangeTab={tabChanged}>\r\n          {\r\n            commonStore.userList.filter(x => x.name != 'Dad').map((x,index)=> (\r\n            <Tab heading={x.name}>\r\n              { index == tabIndex && <TodayTasksScreen tabIndex={tabIndex} user={x.name}/> }\r\n            </Tab>\r\n            ))\r\n          }\r\n          <Tab heading=\"Dad\">\r\n            <KidReport index={tabIndex}></KidReport>\r\n          </Tab>\r\n        </Tabs>)\r\n        )}\r\n        </ScrollView>\r\n      </Container>\r\n    </SafeAreaProvider>\r\n  );\r\n};\r\nexport default observer(HelloWorldApp);","import { auth } from \"firebase/config\";\r\nimport { View, Text, Button } from \"native-base\";\r\nimport React from \"react\";\r\nimport { StatusBar, StyleSheet, TextInput, TouchableOpacity } from \"react-native\";\r\nimport {useState} from 'react';\r\n\r\nconst LoginScreen = ({ navigation }) => {\r\n\r\n  const [email,setEmail] = useState(\"\");\r\n  const [password,setPassword] = useState(\"\");\r\n  const [error,setError] = useState(\"\");\r\n  const login = () => {\r\n    auth.signInWithEmailAndPassword(email,password)\r\n    .then(() => navigation.navigate('HomeScreen'))\r\n    .catch(error => setError({ errorMessage: error.message }));\r\n  };\r\n\r\n    return (      \r\n    <View style={styles.container}>\r\n      <Text style={{fontSize: 18, margin: 30}}>Đăng nhập</Text>\r\n      {error.errorMessage &&\r\n       (<Text style={{ color: 'red' }}>\r\n        {error.errorMessage}\r\n      </Text>)\r\n      }\r\n      <View style={styles.inputView}>\r\n        <TextInput\r\n          style={styles.TextInput}\r\n          placeholder=\"Email.\"\r\n          placeholderTextColor=\"#003f5c\"\r\n          onChangeText={(email) => setEmail(email)}\r\n        />\r\n      </View>\r\n \r\n      <View style={styles.inputView}>\r\n        <TextInput\r\n          style={styles.TextInput}\r\n          placeholder=\"Password.\"\r\n          placeholderTextColor=\"#003f5c\"\r\n          secureTextEntry={false}\r\n          onChangeText={(password) => setPassword(password)}\r\n        />\r\n      </View>\r\n \r\n      <TouchableOpacity>\r\n        <Text style={styles.forgot_button}>Forgot Password?</Text>\r\n      </TouchableOpacity>\r\n \r\n      <TouchableOpacity style={styles.loginBtn} onPress={login}>\r\n        <Text style={styles.loginText}>LOGIN</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n}\r\n \r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    maxWidth: 600,\r\n    width: 400,\r\n    alignSelf: \"center\",\r\n    backgroundColor: \"#fff\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n \r\n  image: {\r\n    marginBottom: 40,\r\n  },\r\n \r\n  inputView: {\r\n    backgroundColor: \"#FFC0CB\",\r\n    borderRadius: 30,\r\n    width: \"80%\",\r\n    height: 45,\r\n    marginBottom: 20,\r\n \r\n    alignItems: \"center\",\r\n  },\r\n \r\n  TextInput: {\r\n    height: 50,\r\n    flex: 1,\r\n    width: \"90%\",\r\n    padding: 10,\r\n    marginLeft: 20,\r\n  },\r\n \r\n  forgot_button: {\r\n    height: 30,\r\n    marginBottom: 30,\r\n  },\r\n \r\n  loginBtn: {\r\n    width: \"40%\",\r\n    borderRadius: 25,\r\n    height: 50,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    marginTop: 40,\r\n    backgroundColor: \"#FFC0CB\",\r\n  },\r\n});\r\n\r\nexport default LoginScreen;","import \"react-native-gesture-handler\";\r\nimport { Body, Button, Container, Header, Icon, Left, Right, Tab, Tabs, Title, View } from \"native-base\";\r\nimport React, { useState } from \"react\";\r\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\r\nimport TodayTasksScreen from \"components/TodayTasks\";\r\n\r\nconst HelloWorldApp = () => {\r\n\r\n  const [tabIndex,setTab] = useState(0);\r\n  const tabChanged = (e)=> {\r\n    console.log(e);\r\n    setTab(e.i);\r\n  };\r\n\r\n  return (\r\n    <View>Detail</View>\r\n  );\r\n};\r\nexport default HelloWorldApp;","import React, { useState, useEffect } from \"react\";\r\nimport { StyleSheet, Text, View, TouchableOpacity, Image } from \"react-native\";\r\nimport { Camera } from \"expo-camera\";\r\nimport { Button, Icon } from \"native-base\";\r\nimport { useRoute } from \"@react-navigation/native\";\r\n\r\nconst ModalScreen = ({ navigation }) => {\r\n  const [hasPermission, setHasPermission] = useState(null);\r\n  const [type, setType] = useState(Camera.Constants.Type.back);\r\n  const route = useRoute();\r\n  const [photo,setPhoto] = useState();\r\n  const [camera,setCamera] = useState();\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const { status } = await Camera.requestPermissionsAsync();\r\n      setHasPermission(status === \"granted\");\r\n    })();\r\n  }, []);\r\n\r\n  if (hasPermission === null) {\r\n    return <View />;\r\n  }\r\n  if (hasPermission === false) {\r\n    return <Text>No access to camera</Text>;\r\n  }\r\n\r\n  const snap = async()=> {\r\n    if (camera) {\r\n      let photo = await camera.takePictureAsync();\r\n      setPhoto(photo);\r\n    }\r\n  };\r\n\r\n  const goBack = () => {\r\n    navigation.navigate(route.params.sourceScreen,{\r\n      sourceScreen: \"CameraScreen\",\r\n      sourceData: route.params?.sourceData\r\n    });\r\n  };\r\n\r\n  const uploadImage = () => {\r\n    navigation.navigate(route.params.sourceScreen,{\r\n      photo: photo,\r\n      sourceScreen: \"CameraScreen\",\r\n      sourceData: route.params?.sourceData\r\n    });\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {!photo &&\r\n      (<Camera style={styles.camera} type={type} ref={ref=> {\r\n          setCamera(ref);\r\n        }}>\r\n        <View style={styles.buttonContainer}>\r\n          <TouchableOpacity\r\n            style={styles.button}\r\n            onPress={() => {\r\n              setType(\r\n                type === Camera.Constants.Type.back\r\n                  ? Camera.Constants.Type.front\r\n                  : Camera.Constants.Type.back\r\n              );\r\n            }}>\r\n            <View style={{ flex:1, flexDirection: \"row\", justifyContent: \"space-around\", alignContent: \"center\", marginLeft: 20}}>\r\n              <Text style={styles.text}> Camera sau </Text>\r\n              <Text style={styles.text} onPress={snap}> Chụp ảnh </Text>\r\n              <Button transparent style={{marginRight: 20}} onPress={goBack}>\r\n                <Icon name=\"arrow-back\" />\r\n            </Button>\r\n          </View>\r\n          </TouchableOpacity>\r\n        </View>\r\n      </Camera>\r\n      )}\r\n      {photo &&\r\n        <View style={{ flex:1, flexDirection: \"column\", justifyContent: \"space-around\", alignContent: \"center\", marginLeft: 20}}>\r\n          <Image source={{uri: photo.uri}} style={styles.image}>\r\n          </Image>\r\n          <View style={{flexDirection: \"row\", justifyContent: \"space-around\", alignContent: \"center\"}}>\r\n            <Button onPress={()=> {setPhoto(null);}}>\r\n                <Text style={{fontSize: 18}}> Chụp lại </Text>\r\n            </Button>\r\n            <Button onPress={uploadImage}>\r\n                <Text style={{fontSize: 18}}> Tải ảnh </Text>\r\n            </Button>\r\n            <Button onPress={goBack}>\r\n                <Text style={{fontSize: 18}}> Thoát </Text>\r\n            </Button>\r\n          </View>\r\n        </View>\r\n      }\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    alignSelf: \"center\",\r\n    width: 640,\r\n    height: 480\r\n  },\r\n  image: {\r\n    flex: 1,\r\n    width: 640,\r\n    height: 480\r\n  },\r\n  camera: {\r\n    flex: 1\r\n  },\r\n  buttonContainer: {\r\n    flex: 1,\r\n    backgroundColor: \"transparent\",\r\n    flexDirection: \"row\",\r\n    margin: 20,\r\n  },\r\n  button: {\r\n    flex: 1,\r\n    alignSelf: \"flex-end\",\r\n    alignItems: \"center\",\r\n  },\r\n  text: {\r\n    fontSize: 18,\r\n    marginLeft: 20,\r\n    color: \"white\",\r\n  },\r\n});\r\n\r\n\r\nexport default ModalScreen;","import { useNavigation } from \"@react-navigation/native\";\r\nimport { auth } from \"firebase/config\";\r\nimport { View, Text, Button, Spinner } from \"native-base\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { ActivityIndicator } from \"react-native\";\r\n\r\nconst LoadingScreen = () => {\r\n    // Set an initializing state whilst Firebase connects\r\n    const [initializing, setInitializing] = useState(true);\r\n    const navigation = useNavigation();\r\n    const [user, setUser] = useState();\r\n\r\n    // Handle user state changes\r\n    const onAuthStateChanged = (user) => {\r\n      if (!user){\r\n        navigation.navigate('LoginScreen');\r\n      }\r\n      else {\r\n        navigation.navigate('HomeScreen');\r\n      }\r\n      setUser(user);\r\n      if (initializing) setInitializing(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n      const subscriber = auth.onAuthStateChanged(onAuthStateChanged);\r\n      return subscriber; // unsubscribe on unmount\r\n    }, []);  \r\n    return (\r\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n          <Spinner color='green' />\r\n      </View>\r\n    );\r\n}\r\n\r\nexport default LoadingScreen;","import { createStackNavigator } from '@react-navigation/stack';\r\nimport HomeScreen from \"@components/screens/HomeScreen\";\r\nimport LoginScreen from \"@components/screens/LoginScreen\";\r\nimport React from \"react\";\r\nimport TaskDetailScreen from \"@components/screens/TaskDetailScreen\";\r\nimport CameraScreen from '@components/screens/CameraScreen';\r\nimport LoadingScreen from './LoadingScreen';\r\n\r\nconst MainStack = createStackNavigator();\r\n\r\nconst MainStackScreen = ({navigation}) => {\r\n    return (\r\n      <MainStack.Navigator headerMode=\"none\">\r\n        <MainStack.Screen name=\"LoadingScreen\" component={LoadingScreen} />\r\n        <MainStack.Screen name=\"HomeScreen\" component={HomeScreen} />\r\n        <MainStack.Screen name=\"LoginScreen\" component={LoginScreen} />\r\n        <MainStack.Screen name=\"CameraScreen\" component={CameraScreen} />\r\n        <MainStack.Screen name=\"TaskDetailScreen\" component={TaskDetailScreen} />\r\n      </MainStack.Navigator>\r\n    );\r\n}\r\n\r\nexport default MainStackScreen;","import { createStackNavigator } from '@react-navigation/stack';\r\nimport Home from \"components/screens/Home\";\r\nimport React from \"react\";\r\nimport TaskDetailScreen from \"components/screens/TaskDetailScreen\";\r\nimport LoginScreen from './LoginScreen';\r\n\r\nconst ModelStack = createStackNavigator();\r\n\r\nconst ModelStackScreen = ({navigation}) => {\r\n    return (\r\n      <ModelStack.Navigator headerMode=\"none\">\r\n        <ModelStack.Screen name=\"LoginScreen\" component={LoginScreen} />        \r\n        <ModelStack.Screen name=\"Details\" component={TaskDetailScreen} />\r\n      </ModelStack.Navigator>\r\n    );\r\n}\r\n\r\nexport default ModelStackScreen;","import \"react-native-gesture-handler\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from '@react-navigation/stack';\nimport React from \"react\";\nimport MainStack from \"@components/screens/MainStack\";\nimport ModelStackScreen from '@components/screens/ModelStack';\n\nconst RootStack = createStackNavigator();\n\nconst TaskApp = () => {\n  return (\n    <NavigationContainer>\n      <RootStack.Navigator mode=\"modal\" headerMode=\"none\">\n        <RootStack.Screen name=\"Main\" component={MainStack} />\n        <RootStack.Screen name=\"MyModal\" component={ModelStackScreen} />\n      </RootStack.Navigator>\n    </NavigationContainer>\n  );\n};\nexport default TaskApp;"],"sourceRoot":""}