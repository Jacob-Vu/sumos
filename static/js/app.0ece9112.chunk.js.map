{"version":3,"sources":["firebase/config.js","TodayTasks.js","App.js"],"names":["fire","db","firebase","apps","length","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","styles","StyleSheet","create","baseText","fontSize","titleText","fontWeight","result","marginLeft","color","TodayTasksScreen","props","useState","todoList","setTodoList","selectedTasks","setSelectedTasks","doneTasks","setDoneTasks","dateStr","Date","toLocaleDateString","replaceAll","useEffect","selectTasks","collection","user","doc","get","then","selectDoc","exists","data","forEach","item","push","doneDoc","userDoc","allTodo","v","selected","includes","ID","done","sortTodo","console","log","list","sort","x","y","ScrollView","style","map","l","i","key","bottomDivider","backgroundColor","onPress","id","todoTemp","find","selectedTemp","filter","set","onSelectItem","Task","Cat","value","onValueChange","alert","doneTemp","onDoneItem","HelloWorldApp","placement","leftComponent","icon","centerComponent","text","rightComponent","heading","TodayTasks"],"mappings":"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","file":"static/js/app.0ece9112.chunk.js","sourcesContent":["import firebase from '@firebase/app';\r\nimport '@firebase/auth';\r\nimport '@firebase/firestore';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCZ1W91h5gI4Ys3K44apJMX-dfAzKmKOzc\",\r\n    authDomain: \"todo-app-594e8.firebaseapp.com\",\r\n    projectId: \"todo-app-594e8\",\r\n    storageBucket: \"todo-app-594e8.appspot.com\",\r\n    messagingSenderId: \"254618059037\",\r\n    appId: \"1:254618059037:web:2a162824c6e6dfd3d921f4\",\r\n    measurementId: \"G-84M73W8WLD\"\r\n};\r\n\r\nlet fire = null;\r\nif (!firebase.apps.length) {\r\n   fire = firebase.initializeApp(firebaseConfig);\r\n}else {\r\n   fire = firebase.app(); // if already initialized, use that one\r\n}\r\n\r\nexport const auth = fire.auth();\r\n\r\nexport const db = fire.firestore();\r\n\r\nexport default {fire};","import React, { useState, useEffect } from 'react';\r\nimport { StyleSheet, ScrollView, View, Content, Button, Alert } from 'react-native';\r\nimport { List, ListItem, Body, Left, Right, Text, Switch, Icon } from 'native-base';\r\nimport { db } from './firebase/config';\r\nimport color from 'color';\r\n\r\nconst TodayTasksScreen = (props) => {\r\n  const [todoList, setTodoList] = useState([]);\r\n  const [selectedTasks, setSelectedTasks] = useState([]);  \r\n  const [doneTasks, setDoneTasks] = useState([]);  \r\n  const dateStr = new Date().toLocaleDateString().replaceAll('/','-');\r\n  useEffect(()=>{\r\n    let selectTasks = [];\r\n    let doneTasks = [];\r\n    db.collection('selectlist' + props.user).doc(dateStr).get().then((selectDoc) => {                \r\n      if (selectDoc.exists){      \r\n        selectDoc.data().selectedTasks.forEach(item => {\r\n          selectTasks.push(item);\r\n        });\r\n        setSelectedTasks(selectTasks);\r\n      }      \r\n    });\r\n\r\n    db.collection('donelist' + props.user).doc(dateStr).get().then((doneDoc) => {                \r\n      if (doneDoc.exists){      \r\n        doneDoc.data().doneTasks.forEach(item => {\r\n          doneTasks.push(item);\r\n        });\r\n        setDoneTasks(doneTasks);\r\n      }\r\n    })\r\n\r\n    db.collection('todolist').doc('values').get().then((userDoc) =>{\r\n      if (userDoc.exists){\r\n        let todoList = [];\r\n        userDoc.data().allTodo.forEach(v => {\r\n          v.selected = selectTasks.includes(v.ID);\r\n          v.done = doneTasks.includes(v.ID);\r\n          todoList.push(v);\r\n        })\r\n        setTodoList(sortTodo(todoList));\r\n      } else {\r\n        console.log(\"No doc values found\");\r\n      }\r\n    });\r\n\r\n  },[]);\r\n\r\n  const sortTodo = (list) => {\r\n    return list.sort((x,y)=> {\r\n      if (x.selected == y.selected){\r\n        return x.ID > y.ID;\r\n      }\r\n      else {\r\n        return y.selected - x.selected;\r\n      }\r\n    })\r\n  }\r\n\r\n  const onSelectItem = (id) => {    \r\n    const todoTemp = [...todoList];\r\n    todoTemp.find(x => x.ID == id).selected = !todoTemp.find(x => x.ID == id).selected;        \r\n    setTodoList(sortTodo(todoTemp));\r\n    let selectedTemp = [];\r\n    if (selectedTasks.includes(id)){\r\n      // User don't want the task, remove it\r\n      selectedTemp = selectedTasks.filter(x => x !== id);\r\n      // remove it from done list too      \r\n      if (doneTasks.includes(id)){        \r\n        setDoneTasks(doneTasks.filter(x => x !== id));\r\n      }\r\n    }\r\n    else {\r\n      selectedTemp = [...selectedTasks];\r\n      selectedTemp.push(id);\r\n    }    \r\n    setSelectedTasks(selectedTemp);    \r\n    db.collection('selectlist' + props.user).doc(dateStr).set({selectedTasks: selectedTemp});\r\n  };\r\n  \r\n  const onDoneItem = (id) => {\r\n    if (!selectedTasks.includes(id)){\r\n      alert('This job has not selected!');\r\n    }\r\n    let doneTemp = [];\r\n    if (doneTasks.includes(id)){\r\n      doneTemp = doneTasks.filter(x => x !== id);\r\n    }\r\n    else {\r\n      doneTemp = [...doneTasks];\r\n      doneTemp.push(id);\r\n    }\r\n    setDoneTasks(doneTemp);\r\n    db.collection('donelist' + props.user).doc(dateStr).set({doneTasks: doneTemp});\r\n  };  \r\n\r\n  return (\r\n     <ScrollView>\r\n      <Text style={styles.result} >{props.user} đã chọn {selectedTasks.length} việc. Đã hoàn thành: {doneTasks.length} việc</Text>\r\n      <List>\r\n      {        \r\n        todoList.map((l, i) => (          \r\n         <ListItem key={i} bottomDivider style={{ backgroundColor: l.selected? '#cde1f9': '#fcfcfc'}}>            \r\n             <Body>               \r\n                <Text style={styles.titleText} onPress={() => onSelectItem(l.ID)}>{l.Task}</Text>\r\n                <Text style={styles.baseText}>{l.Cat}</Text>               \r\n             </Body>\r\n             <Right>               \r\n              {/* <Button title=\"Detail\" onPress={() => Alert.alert('Simple Button pressed')} >                            \r\n              </Button> */}\r\n               { selectedTasks.includes(l.ID) && (\r\n                  <Switch value={doneTasks.includes(l.ID)} onValueChange={()=>onDoneItem(l.ID)} />\r\n                )\r\n              }\r\n             </Right>\r\n         </ListItem>\r\n        ))\r\n      }\r\n      </List>\r\n    </ScrollView>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  baseText: {\r\n    fontSize: 11,\r\n  },\r\n  titleText: {\r\n    fontSize: 15,\r\n    fontWeight: 'bold'   \r\n  },\r\n  result: {\r\n    marginLeft: '50px',\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n    color: \"red\"\r\n  }\r\n});\r\n\r\n\r\nexport default TodayTasksScreen;","import { Tab, Tabs } from 'native-base';\nimport React from 'react';\nimport { Button, ScrollView, Alert } from 'react-native';\nimport { Header } from 'react-native-elements';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport TodayTasksScreen from './TodayTasks';\n\n\nconst HelloWorldApp = () => {\n  return (\n    <SafeAreaProvider>\n      <ScrollView>\n        <Header\n          placement=\"left\"\n          leftComponent={{ icon: 'menu', color: '#fff' }}\n          centerComponent={{ text: 'SUMO DAYS', style: { color: '#fff' } }}\n          rightComponent={{ icon: 'home', color: '#fff' }}\n        />\n          <Tabs>            \n            <Tab heading=\"Susu\">\n              <TodayTasksScreen user='Susu'/>\n            </Tab>\n            <Tab heading=\"Nemo\">\n              <TodayTasksScreen user='Nemo'/>\n            </Tab>\n            <Tab heading=\"Dad\">\n              <TodayTasksScreen user='Dad'/>\n            </Tab>\n          </Tabs>\n        </ScrollView>\n      </SafeAreaProvider>\n  );\n};\nexport default HelloWorldApp;\n"],"sourceRoot":""}