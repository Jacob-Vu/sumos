{"version":3,"sources":["utils/Extensions.ts","firebase/config.ts","models/TaskItem.ts","stores/TaskStore.ts","stores/SelectTaskStore.ts","stores/StorageStore.ts","stores/RootStore.ts","components/CommentList.tsx","components/TaskListItem.tsx","components/TodayTasks.tsx","components/KidReport.tsx","components/screens/HomeScreen.tsx","components/screens/LoginScreen.tsx","components/screens/TaskDetailScreen.tsx","components/screens/CameraScreen.tsx","components/screens/LoadingScreen.tsx","components/screens/MainStack.tsx","components/screens/ModelStack.tsx","App.tsx"],"names":["Date","prototype","format","mm","this","getMonth","dd","getDate","getFullYear","join","String","toDate","items","split","fire","auth","firebase","apps","length","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","storage","TaskItem","taskStore","id","task","cat","time","freqPerWeek","weekCount","attachments","comments","isSelected","isCompleted","toggleComplete","makeAutoObservable","action","TaskStore","taskList","periodUserList","loading","loadTaskList","user","dateSl","a","async","collection","doc","get","userDoc","weekFromDate","addDays","getDay","weekToDate","loadSelectedDate","weekTaskList","selectedTasks","find","x","date","seconds","toLocaleDateString","docPath","taskDoc","data","exists","workList","listTask","map","v","selectedItem","taskId","reduce","acc","dayTask","fromTask","runInAction","push","console","log","loadUserPeriod","userList","fromDate","userDataList","forEach","item","dataDate","selected","completed","filter","userDt","dataDates","dateSelects","where","saveSelectList","filterTasks","ref","url","set","lastUpdate","migrate","orderBy","computed","SelectTaskStore","dateStr","selectDoc","doneDoc","newItems","doneTasks","includes","lastUpdated","observable","StorageStore","addAttachments","taskItem","file","path","getPlatformPath","value","name","getFileName","fileName","filePath","fileAttach","fetch","response","blob","child","put","taskUpload","getDownloadURL","Platform","OS","substring","indexOf","now","pop","uri","select","android","web","ios","getPlatformURI","imagePath","imgSource","isNaN","state","rootStore","selectTaskStore","storageStore","storesContext","React","createContext","useStores","useContext","styles","StyleSheet","create","baseText","fontSize","titleText","fontWeight","input","height","width","maxWidth","marginLeft","fontStyle","borderWidth","borderBottomColor","borderBottomWidth","borderColor","CommentList","props","useState","commentValue","setCommentValue","style","marginTop","cmt","i","color","key","text","flexDirection","placeholder","onChangeText","transparent","onPress","FontAwesome","taskButton","flex","justifyContent","alignContent","alignSelf","observer","navigation","useNavigation","route","useRoute","isFocused","useIsFocused","showComment","setShowComment","useEffect","params","photo","backgroundColor","View","TouchableWithoutFeedback","onSelectItem","attachItem","Image","source","minWidth","onValueChange","e","onDoneItem","position","navigate","sourceScreen","takePicture","ImagePicker","granted","alert","result","cancelled","onAddFile","showImagePicker","marginBottom","setDate","index","toggleSelect","SelectDay","val","ScrollView","sortedTaskList","totalSelected","totalCompleted","Button","size","title","HelloWorldApp","initializing","setInitializing","setUser","onAuthStateChanged","tabIndex","setTab","onChangeTab","heading","TodayTasks","container","alignItems","image","inputView","borderRadius","TextInput","padding","forgot_button","loginBtn","LoginScreen","email","setEmail","password","setPassword","error","setError","margin","errorMessage","StatusBar","placeholderTextColor","secureTextEntry","TouchableOpacity","signInWithEmailAndPassword","then","catch","message","loginText","camera","buttonContainer","button","ModalScreen","hasPermission","setHasPermission","Camera","Constants","Type","back","type","setType","setPhoto","setCamera","requestPermissionsAsync","status","Text","goBack","front","takePictureAsync","marginRight","LoadingScreen","MainStack","createStackNavigator","MainStackScreen","Navigator","headerMode","Screen","component","HomeScreen","CameraScreen","TaskDetailScreen","ModelStack","ModelStackScreen","RootStack","TaskApp","NavigationContainer","mode"],"mappings":"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","file":"static/js/app.f03a509e.chunk.js","sourcesContent":["Date.prototype.format = function() {\r\n    var mm = this.getMonth() + 1; // getMonth() is zero-based\r\n    var dd = this.getDate();\r\n\r\n    return [(dd>9 ? \"\" : \"0\") + dd,(mm>9 ? \"\" : \"0\") + mm,this.getFullYear()\r\n           ].join(\"-\");\r\n};\r\n\r\nString.prototype.toDate = function() {\r\n    const items = this.split(\"-\");\r\n    return new Date(items[2],items[1] - 1,items[0]);\r\n};","import firebase from \"@firebase/app\";\r\nimport \"@firebase/auth\";\r\nimport \"@firebase/firestore\";\r\nimport \"@firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCZ1W91h5gI4Ys3K44apJMX-dfAzKmKOzc\",\r\n    authDomain: \"todo-app-594e8.firebaseapp.com\",\r\n    projectId: \"todo-app-594e8\",\r\n    storageBucket: \"todo-app-594e8.appspot.com\",\r\n    messagingSenderId: \"254618059037\",\r\n    appId: \"1:254618059037:web:2a162824c6e6dfd3d921f4\",\r\n    measurementId: \"G-84M73W8WLD\"\r\n};\r\n\r\nlet fire = null;\r\nif (!firebase.apps.length) {\r\n   fire = firebase.initializeApp(firebaseConfig);\r\n} else {\r\n   fire = firebase.app(); // if already initialized, use that one\r\n}\r\n\r\nexport const auth = fire.auth();\r\n\r\nexport const db = fire.firestore();\r\n\r\nexport const storage = fire.storage();\r\n\r\nexport default {fire};","import { observable, computed, action, makeAutoObservable } from \"mobx\";\r\nimport { TaskStore } from 'stores/TaskStore';\r\n\r\nexport default class TaskItem {\r\n    taskStore: TaskStore;\r\n    id;\r\n    cat;\r\n    freqPerWeek;\r\n    time;\r\n    task;\r\n    isSelected;\r\n    isCompleted;\r\n    weekCount;\r\n    attachments;\r\n    comments;\r\n\r\n    constructor(taskStore, id, task, cat, time, freqPerWeek,weekCount,attachments = [],comments = [],isSelected = false, isCompleted = false) {\r\n\t\tthis.taskStore = taskStore;\r\n\t\tthis.id = id;\r\n        this.task = task;\r\n        this.cat = cat;\r\n        this.time = time;\r\n\t\tthis.freqPerWeek = freqPerWeek;\r\n        this.weekCount = weekCount;\r\n        this.isSelected = isSelected;\r\n        this.isCompleted = isCompleted;\r\n        this.attachments = attachments;\r\n        this.comments = comments;\r\n        makeAutoObservable(this);\r\n\t}\r\n\r\n    @action toggleSelect = () => {\r\n        this.isSelected = !this.isSelected;\r\n    }\r\n\r\n    toggleComplete = () => {\r\n        this.isCompleted = !this.isCompleted;\r\n    }\r\n\r\n    static fromTask(taskStore,task,weekCount,attachments = [], comments = [],isSelected = false, isCompleted = false){\r\n        return new TaskItem(taskStore,task.id, task.task, task.cat, task.time, task.freqPerWeek, weekCount,attachments, comments, isSelected, isCompleted);\r\n    }\r\n}","import { addDays, format } from \"date-fns\";\r\nimport orderBy from \"lodash/orderBy\";\r\nimport { action, computed, makeAutoObservable, runInAction } from \"mobx\";\r\nimport { db, storage } from \"../firebase/config\";\r\nimport TaskItem from \"../models/TaskItem\";\r\nimport \"../utils/Extensions\";\r\n\r\nclass TaskStore {\r\n  \r\n  taskList = [];\r\n  periodUserList = [];\r\n  loading = false;\r\n\r\n  constructor (){\r\n    console.log(\"Initialize TaskStore...\");\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  loadTaskList = async(user, dateSl) => {\r\n    this.loading = true;\r\n    const userDoc = await db.collection(\"todolist\").doc(\"default\").get();    \r\n\r\n    const weekFromDate = addDays(dateSl, dateSl.getDay() > 0? 1 -dateSl.getDay(): -6);\r\n    const weekToDate = addDays(dateSl, dateSl.getDay() > 0? 7 - dateSl.getDay(): 0);\r\n    const weekTaskList = await this.loadSelectedDate([user], weekFromDate, weekToDate);\r\n\r\n    let selectedTasks: [] = weekTaskList.find( x=> new Date(x.date.seconds*1000).toLocaleDateString() == dateSl.toLocaleDateString())?.selectedTasks;\r\n    if (!selectedTasks){\r\n      const docPath = `${user}_${format(dateSl, \"dd-MM-yyyy\")}`;\r\n      const taskDoc = await db.collection(\"selectlist\").doc(docPath).get();\r\n      selectedTasks = taskDoc.data()?.selectedTasks;\r\n    }\r\n\r\n    if (userDoc.exists && userDoc.data().workList) {\r\n      const listTask = userDoc.data().workList.map((v) => {\r\n        const selectedItem = selectedTasks?.find((x) => v.id == x.taskId);\r\n        const weekCount = weekTaskList.reduce((acc,dayTask) => {\r\n            if (dayTask.selectedTasks.find(x=> x.taskId == v.id)){\r\n                return acc += 1;\r\n            }\r\n            return acc;\r\n        },0);\r\n        return TaskItem.fromTask(\r\n          this,\r\n          v,\r\n          weekCount,\r\n          selectedItem?.attachments,\r\n          selectedItem?.comments,\r\n          selectedItem != null,\r\n          selectedItem?.isCompleted\r\n        );\r\n      });\r\n      runInAction(()=>{\r\n        this.taskList = [];\r\n        this.taskList.push(...listTask);\r\n        this.loading = false;\r\n      })\r\n    } else {\r\n      console.log(\"No doc values found\");\r\n    }\r\n  }\r\n\r\n  loadUserPeriod = async (userList, fromDate, toDate) => {\r\n    let userDataList = [];\r\n    this.loading = true;\r\n    const taskList = await this.loadSelectedDate(userList, fromDate, toDate);\r\n    taskList.forEach(item => {\r\n      let dataDate = {\r\n        date: format(new Date(item.date.seconds*1000),'dd-MM-yyyy'),\r\n        selected: item.selectedTasks.length,\r\n        completed: item.selectedTasks.filter( x=>x.isCompleted).length\r\n      };\r\n      const userDt = userDataList.find(x=> x.user == item.user);\r\n      if (!userDt){\r\n        userDataList.push({\r\n          user: item.user,\r\n          dataDates: [dataDate]\r\n        })\r\n      } else {\r\n        userDt.dataDates.push(dataDate);\r\n      }\r\n    });\r\n    runInAction(()=>{\r\n      this.loading = false;\r\n      this.periodUserList = userDataList;\r\n    })\r\n  }\r\n\r\n  loadSelectedDate = async (userList, fromDate, toDate) => {\r\n    const dateSelects = [];\r\n    const querySnapshot = await db.collection(\"selectlist\")\r\n      .where(\"user\", \"in\", userList)\r\n      .where(\"date\", \">=\", fromDate)\r\n      .where(\"date\", \"<=\", toDate)\r\n      .get();\r\n    querySnapshot.forEach((doc) => {\r\n      dateSelects.push(doc.data());\r\n    });\r\n    return dateSelects;\r\n  }\r\n\r\n  saveSelectList = async (user, dateSl) => {\r\n    this.loading = true;\r\n    const docPath = `${user}_${format(dateSl, \"dd-MM-yyyy\")}`;\r\n    const filterTasks = this.taskList\r\n      .filter((x) => x.isSelected)\r\n      .map((task) => ({\r\n        taskId: task.id,\r\n        isCompleted: task.isCompleted,\r\n        comments: task.comments,\r\n        attachments: task.attachments?.map(x=> ({\r\n          ref: x.ref,\r\n          url: x?.url\r\n        }))\r\n      }));\r\n    await db.collection(\"selectlist\").doc(docPath).set({\r\n      date: dateSl,\r\n      lastUpdate: new Date(),\r\n      user,\r\n      selectedTasks: filterTasks,\r\n    });\r\n    runInAction(() => {\r\n      this.loading = false;\r\n    });\r\n  }\r\n\r\n  @computed get sortedTaskList() {\r\n    return orderBy(this.taskList, [\"isSelected\", \"id\"], [\"desc\", \"asc\"]);\r\n  }\r\n\r\n  // can be called as `this.total`\r\n  @computed get totalCompleted() {\r\n    return this.taskList.filter((x) => x.isCompleted).length;\r\n  }\r\n\r\n  // can be called as `this.total`\r\n  @computed get totalSelected() {\r\n    return this.taskList.filter((x) => x.isSelected).length;\r\n  }\r\n\r\n  @action saveSelectTask(id) {\r\n\r\n  }\r\n\r\n  migrate = async() => {\r\n    db.collection(\"todolist\")\r\n      .doc(\"default\");\r\n  }\r\n}\r\n\r\nexport default TaskStore;\r\n","import { observable } from \"mobx\";\r\nimport { db } from \"../firebase/config\";\r\nimport \"../utils/Extensions\";\r\n\r\nclass SelectTaskStore {\r\n    @observable selectedTasks = [];\r\n\r\n    async migrateData(user,date){\r\n        const dateStr = date.format();\r\n        const selectDoc = await db.collection(\"selectlist\" + user).doc(dateStr).get();\r\n        const doneDoc = await db.collection(\"donelist\" + user).doc(dateStr).get();\r\n        let newItems = [];\r\n        let doneTasks  = [];\r\n        const docPath = `${user}_${dateStr}`;\r\n        if (doneDoc.exists && doneDoc.data().doneTasks) {\r\n            doneDoc.data().doneTasks.forEach(taskId => {\r\n              doneTasks.push(taskId);\r\n            });\r\n          }\r\n        if (selectDoc.exists && selectDoc.data().selectedTasks) {\r\n            selectDoc.data().selectedTasks.forEach(taskId => {\r\n                newItems.push({\r\n                    id: `${docPath}_${taskId}`,\r\n                    taskId: taskId,\r\n                    date: date,\r\n                    user,\r\n                    isCompleted: doneTasks.includes(taskId),\r\n                    attachments: []\r\n                });\r\n            });\r\n        }\r\n        db.collection(\"selectlist\").doc(docPath).set({\r\n            lastUpdated: new Date(),\r\n            selectedTasks: newItems\r\n        });\r\n    }\r\n}\r\n\r\nexport default SelectTaskStore;","import { addDays, format } from \"date-fns\";\r\nimport orderBy from \"lodash/orderBy\";\r\nimport { action, computed, makeAutoObservable, runInAction } from \"mobx\";\r\nimport { Platform } from \"react-native\";\r\nimport { db, storage } from \"../firebase/config\";\r\nimport TaskItem from \"../models/TaskItem\";\r\nimport \"../utils/Extensions\";\r\n\r\nclass StorageStore {\r\n\r\n  loading = false;  \r\n\r\n  constructor () {\r\n    console.log(\"Initialize TaskStore...\");\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  addAttachments = async(taskItem,file) => {\r\n    this.loading = true;\r\n    let path = this.getPlatformPath(file).value;\r\n    let name = this.getFileName(file.fileName,path);\r\n    const filePath = \"attachFiles/\" + name;\r\n    runInAction(()=> {\r\n      const fileAttach = {value: path, ref: filePath};\r\n      taskItem.attachments.push(fileAttach);\r\n    });\r\n    const response = await fetch(path);\r\n    const blob = await response.blob();\r\n    \r\n    const ref = storage.ref().child(filePath);\r\n    const taskUpload = await ref.put(blob);\r\n\r\n    const url = await ref.getDownloadURL();\r\n    taskItem.attachments[taskItem.attachments.length - 1].url = url;\r\n    this.loading = false;\r\n    return taskUpload;\r\n  }\r\n\r\n  getFileName = (name, path) => {\r\n    if (name != null) { return name; }\r\n\r\n    if (Platform.OS === \"ios\") {\r\n        path = \"~\" + path.substring(path.indexOf(\"/Documents\"));\r\n    }\r\n    if (Platform.OS == \"web\") {\r\n      const date = new Date();\r\n      return format(date, \"yyMMdd_\") + Date.now() ;\r\n    }\r\n    return path.split(\"/\").pop();\r\n  }\r\n\r\n  /**\r\n   * Get platform specific value from response\r\n   */\r\n  getPlatformPath = ({ path, uri }) => {\r\n      return Platform.select({\r\n          android: {value: path },\r\n          web: {value: uri},\r\n          ios: {value: uri }\r\n      });\r\n  }\r\n\r\n  getPlatformURI = (imagePath) => {\r\n      let imgSource = imagePath;\r\n      if (isNaN(imagePath)) {\r\n          imgSource = { uri: this.state.imagePath };\r\n          if (Platform.OS == \"android\") {\r\n              imgSource.uri = \"file:///\" + imgSource.uri;\r\n          }\r\n      }\r\n      return imgSource;\r\n  }\r\n\r\n}\r\n\r\nexport default StorageStore;\r\n","import React from 'react';\r\nimport TaskStore from './TaskStore';\r\nimport SelectTaskStore from './SelectTaskStore';\r\nimport StorageStore from './StorageStore';\r\n\r\nclass RootStore {\r\n    taskStore: TaskStore;\r\n    selectTaskStore: ReportTaskStore;\r\n    storageStore: StorageStore;\r\n    constructor() {\r\n        this.taskStore = new TaskStore(this);\r\n        this.selectTaskStore = new SelectTaskStore(this);\r\n        this.storageStore = new StorageStore(this);\r\n    }\r\n}\r\n\r\nconst rootStore = new RootStore();\r\n\r\nexport default rootStore;\r\n\r\nconst storesContext = React.createContext({ ...rootStore });\r\nexport const useStores = () => React.useContext(storesContext);\r\n\r\n","import { useNavigation, useRoute, useIsFocused  } from \"@react-navigation/native\";\r\nimport { useStores } from \"../stores/RootStore\";\r\nimport TaskItem from '../models/TaskItem';\r\nimport { FontAwesome } from '@expo/vector-icons';\r\nimport { TextInput } from 'react-native-gesture-handler';\r\nimport React, { useState } from \"react\";\r\nimport { Button, Text, View } from \"native-base\";\r\nimport { StyleSheet } from \"react-native\";\r\nimport { format } from \"date-fns\";\r\n\r\nconst CommentList = (props) => {\r\n    \r\n    const [commentValue, setCommentValue] = useState(\"\");\r\n    const {taskStore, storageStore} = useStores();\r\n\r\n    const taskItem: TaskItem = props.item;\r\n\r\n    const addComment = () => {\r\n      taskItem.comments.push({id: Date.now(), text: commentValue});\r\n      setCommentValue(\"\");\r\n      taskStore.saveSelectList(props.user,props.date);\r\n    };\r\n\r\n    return (\r\n        <View style={{ width: 400, marginLeft: 20, marginTop: 20, borderWidth: 1, borderColor: \"rgb(201, 201, 201)\" }}>\r\n          {\r\n              taskItem.comments?.map((cmt,i) => (\r\n                  <Text style={{ fontStyle: \"italic\", color: i % 2 == 0? \"#3962a3\": \"#39a372\" }} key={cmt.id}> {format(new Date(cmt.id),'HH:mm')}: {cmt.text}</Text>\r\n              ))\r\n          }\r\n          <View style={{flexDirection: \"row\", marginTop: 20}}>\r\n            <TextInput style={styles.input} placeholder=\"Write to here...\" value={commentValue} onChangeText={setCommentValue} ></TextInput>\r\n            <Button style={{marginLeft: 10}} transparent onPress={() => addComment()}>\r\n            <FontAwesome name=\"send-o\" style={{fontSize:25}} color=\"rgb(63, 81, 181)\" />\r\n            </Button>\r\n          </View>\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  baseText: {\r\n    fontSize: 11,\r\n  },\r\n  titleText: {\r\n    fontSize: 15,\r\n    fontWeight: \"bold\"\r\n  },\r\n  input: {\r\n    height: 40,\r\n    width: 300,\r\n    maxWidth: 500,\r\n    marginLeft: 20,\r\n    fontSize: 16,\r\n    fontStyle: \"italic\",\r\n    borderWidth: 0,\r\n    borderBottomColor: '#000000',\r\n    borderBottomWidth: 1,\r\n    borderColor: \"rgb(201, 201, 201)\"\r\n  }\r\n});\r\n\r\nexport default CommentList;","import { Body, Button, ListItem, Right, Switch, Text, Spinner } from 'native-base';\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Image, Platform, StyleSheet, TouchableWithoutFeedback, View } from \"react-native\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport * as ImagePicker from \"expo-image-picker\";\r\nimport { useNavigation, useRoute, useIsFocused  } from \"@react-navigation/native\";\r\nimport { useStores } from \"../stores/RootStore\";\r\nimport TaskItem from '../models/TaskItem';\r\nimport { FontAwesome } from '@expo/vector-icons';\r\nimport { TextInput } from 'react-native-gesture-handler';\r\nimport CommentList from './CommentList';\r\n\r\n\r\nconst TaskListItem = (props) => {\r\n  const taskItem: TaskItem = props.taskItem;\r\n  const navigation = useNavigation();\r\n  const route = useRoute();\r\n  const {taskStore, storageStore} = useStores();\r\n  const isFocused = useIsFocused();\r\n\r\n  const [showComment, setShowComment] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (isFocused && route.params?.photo && route.params.id == taskItem.id) {\r\n      storageStore.addAttachments(taskItem, route.params.photo);\r\n    }\r\n  }, [route.params?.id]);\r\n\r\n  const showImagePicker = async (taskItem) => {\r\n    // ask the user for the permission to access the media library\r\n    const permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();\r\n\r\n    if (permissionResult.granted === false) {\r\n      alert(\"You've refused to allow this appp to access your photos!\");\r\n      return;\r\n    }\r\n\r\n    const result = await ImagePicker.launchImageLibraryAsync();\r\n\r\n    if (result.cancelled) {\r\n      console.log(\"User cancelled image picker\");\r\n    } else {\r\n      storageStore.addAttachments(taskItem, result);\r\n      if (props.onAddFile){\r\n        props.onAddFile();\r\n      }\r\n    }\r\n  };\r\n  \r\n  \r\n  const takePicture = (taskItem) => {\r\n    navigation.navigate(\"CameraScreen\",{ sourceScreen: \"HomeScreen\", id:  taskItem.id });\r\n  };\r\n  const attachments = (taskItem) => {\r\n    return taskItem.attachments.map(attachItem => (\r\n      <Image source={{uri: attachItem.value?? attachItem.url}} style={{width: 50,height: 50, marginLeft: 20}}></Image>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <ListItem key={taskItem.id} style={{ backgroundColor: taskItem.isSelected? \"#cde1f9\": \"#fcfcfc\"}}>\r\n      <Body style={{flexDirection: \"column\"}}>\r\n        <View style={{flexDirection: \"row\"}}>\r\n          <View>\r\n            <TouchableWithoutFeedback onPress={() => props.onSelectItem(taskItem)}>\r\n              <View>\r\n                <Text style={styles.titleText}>{taskItem.id}. {taskItem.task}</Text>\r\n                <Text style={styles.baseText}>Mục: {taskItem.cat} </Text>\r\n                { taskItem.weekCount > 0 ?\r\n                <Text style={{fontSize: 13,color: taskItem.weekCount > taskItem.freqPerWeek? \"red\": \"\"}}>Đã chọn: {taskItem.weekCount} lần\r\n                  (Được chọn {taskItem.freqPerWeek} lần) </Text>\r\n                : <Text style={{fontSize: 13}}>Được chọn {taskItem.freqPerWeek} lần </Text> }\r\n              </View>\r\n            </TouchableWithoutFeedback>\r\n          </View>\r\n          <View style={{flexDirection: \"row\"}}>\r\n          {\r\n            attachments(taskItem)\r\n          }\r\n          {\r\n            storageStore.loading && route.params?.id == taskItem.id && <View><Spinner/><Text>Đang tải ảnh lên... </Text></View>\r\n          }\r\n          </View>\r\n        </View>\r\n        <View>\r\n          {\r\n            showComment && <CommentList item={taskItem} user={props.user} date={props.date}></CommentList>\r\n          }\r\n        </View>\r\n      </Body>\r\n      { taskItem.isSelected &&\r\n      <Right style={{width:250, minWidth: 200, maxWidth:300, flexDirection: \"row\", justifyContent: \"space-evenly\", alignContent: \"flex-start\", alignSelf: \"flex-start\"}}>\r\n          <View style={styles.taskButton}>\r\n            <Switch value={taskItem.isCompleted} onValueChange={(e)=> { props.onDoneItem(taskItem);}}  />\r\n          </View>\r\n          <Button style={styles.taskButton} transparent onPress={() => setShowComment(!showComment)}>\r\n              <FontAwesome name=\"comment\" style={{fontSize:25}} color={taskItem.comments.length > 0 ? \"red\": \"rgb(63, 81, 181)\"} />\r\n              { taskItem.comments.length > 0 && <Text style={{fontSize:14, fontWeight: \"bold\", color: \"white\", position: \"absolute\"}}>{taskItem.comments.length}</Text>}\r\n          </Button>\r\n          <Button style={styles.taskButton} transparent onPress={() => takePicture(taskItem)} >\r\n              <FontAwesome style={{fontSize:25}} name=\"camera\" color=\"rgb(63, 81, 181)\" />\r\n          </Button>\r\n          <Button style={styles.taskButton} transparent onPress={() => showImagePicker(taskItem)}>\r\n              <FontAwesome style={{fontSize:25}} name=\"cloud-upload\" color=\"rgb(63, 81, 181)\" />\r\n          </Button>\r\n      </Right>\r\n      }\r\n    </ListItem>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  baseText: {\r\n    fontSize: 11,\r\n  },\r\n  titleText: {\r\n    fontSize: 15,\r\n    fontWeight: \"bold\"\r\n  },\r\n  input: {\r\n    height: 40,\r\n    maxWidth: 500,\r\n    marginLeft: 20,\r\n    fontSize: 18,\r\n    borderWidth: 1,\r\n    borderColor: \"rgb(201, 201, 201)\"\r\n  },\r\n  taskButton: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignContent: \"center\",\r\n    alignSelf: \"center\"\r\n  }\r\n});\r\n\r\n\r\nexport default observer(TaskListItem);","import { FontAwesome } from \"@expo/vector-icons\";\r\nimport { addDays, format } from \"date-fns\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, List, Spinner, Text } from \"native-base\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { ScrollView, StyleSheet, View } from \"react-native\";\r\nimport TaskItem from \"../models/TaskItem\";\r\nimport { useStores } from \"../stores/RootStore\";\r\nimport TaskListItem from \"./TaskListItem\";\r\n\r\n\r\nconst TodayTasksScreen = (props) => {\r\n  const [dateSl,setDate] = useState(new Date());\r\n  const { taskStore } = useStores();\r\n\r\n  useEffect(()=> {\r\n    taskStore.loadTaskList(props.user,dateSl);\r\n  },[props.index, props.user,dateSl]);\r\n\r\n  const onSelectItem = (task: TaskItem) => {\r\n    task.toggleSelect();\r\n    taskStore.saveSelectList(props.user,dateSl);\r\n  };\r\n\r\n  const SaveSelectList = async() => {\r\n    await taskStore.saveSelectList(props.user,dateSl);\r\n  };\r\n\r\n  const onDoneItem = (task: TaskItem) => {\r\n    task.toggleComplete();\r\n    taskStore.saveSelectList(props.user,dateSl);\r\n  };\r\n\r\n  const onAddFile = (e) => {\r\n    taskStore.saveSelectList(props.user,dateSl);\r\n  };\r\n\r\n  const SelectDay = (val) => {\r\n    setDate(addDays(dateSl, val));\r\n  };\r\n\r\n  return (\r\n     <ScrollView>\r\n        <View style={{flexDirection: \"column\"}}>\r\n          <View style={{flexDirection: \"row\", justifyContent: \"space-around\", marginTop: 20, marginBottom: 20 }}>\r\n              <Button transparent onPress={()=> SelectDay(-1)}>\r\n                <FontAwesome style={{fontSize:35}} name=\"backward\" color=\"rgb(33, 150, 243)\" />\r\n             </Button>\r\n             <View style={{flexDirection: \"row\", justifyContent: 'center'}}>\r\n              <Text style={{fontSize: 18,fontWeight: \"bold\", color: \"red\"}} > {format(dateSl,\"iiii, dd-MM-yyyy\")} </Text>\r\n              {taskStore.loading && <Spinner style={{height: 35}}/>}\r\n             </View>\r\n             <Button transparent onPress={()=> SelectDay(1)}>\r\n             <FontAwesome style={{fontSize:35}} name=\"forward\" color=\"rgb(33, 150, 243)\" />\r\n             </Button>\r\n          </View>\r\n        </View>\r\n        {taskStore.sortedTaskList.length > 0 &&\r\n        (\r\n          <View style={{flexDirection: \"column\"}}>\r\n            <Text style={styles.result} >\r\n              {props.user} đã chọn {taskStore.totalSelected} việc. {\"\\r\\n\"}Đã hoàn thành: {taskStore.totalCompleted} việc</Text>\r\n            <Text style={{ fontSize: 18, fontWeight: \"bold\", marginLeft: 15, marginBottom: 20}}>Danh sách công việc: </Text>\r\n            <List>\r\n            {\r\n              taskStore.sortedTaskList.map((taskItem, i) => (\r\n                <TaskListItem key={taskItem.id} taskItem={taskItem} date={dateSl} onSelectItem={onSelectItem} onDoneItem={onDoneItem} onAddFile={onAddFile} {...props} />\r\n              ))\r\n            }\r\n            </List>\r\n          </View>\r\n        )}\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({  \r\n  result: {\r\n    marginLeft: \"10px\",\r\n    marginBottom: 20,\r\n    fontSize: 22,\r\n    fontWeight: \"bold\",\r\n    color: \"red\"\r\n  }\r\n});\r\n\r\n\r\nexport default observer(TodayTasksScreen);","import { addDays } from \"date-fns\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { List, ListItem, Spinner, Text } from \"native-base\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Button, ScrollView, StyleSheet, View } from \"react-native\";\r\nimport TaskItem from \"../models/TaskItem\";\r\nimport { useStores } from \"../stores/RootStore\";\r\n\r\n\r\nconst KidReport = (props) => {\r\n  const [dateSl,setDate] = useState(new Date());\r\n  const { taskStore } = useStores();\r\n\r\n  useEffect(()=> {\r\n    const weekFromDate = addDays(dateSl, dateSl.getDay() > 0? 1 -dateSl.getDay(): -6);\r\n    const weekToDate = addDays(dateSl, dateSl.getDay() > 0? 7 - dateSl.getDay(): 0);\r\n    taskStore.loadUserPeriod([\"Susu\",\"Nemo\"], weekFromDate, weekToDate);\r\n  },[dateSl]);\r\n\r\n  const onSelectItem = (task: TaskItem) => {\r\n    task.toggleSelect();\r\n  };\r\n\r\n  const SaveSelectList = async() => {\r\n    await taskStore.saveSelectList(props.user,dateSl);\r\n  };\r\n\r\n  const onDoneItem = (task: TaskItem) => {\r\n    task.toggleComplete();\r\n  };\r\n\r\n  const SelectDay = (val) => {\r\n    setDate(addDays(dateSl, val));\r\n  };\r\n\r\n  return (\r\n     <ScrollView>\r\n        <View style={{flexDirection: \"column\"}}>\r\n          <View style={{flexDirection: \"row\", justifyContent: \"space-around\", marginTop: 20, marginBottom: 20 }}>\r\n             <Button style={{size: \"\"}} title=\"<< Hôm qua\" onPress={()=> SelectDay(-1)}/>\r\n             <Button style={{size: \"\"}} title=\"Lưu việc đã chọn\" onPress={()=> SaveSelectList()}></Button>\r\n             <Button style={{size: \"\"}} title=\"Hôm sau >>\" onPress={()=> SelectDay(1)}/>\r\n          </View>\r\n        </View>\r\n        {taskStore.loading ? (<Spinner/> ):\r\n        (\r\n          <View style={{flexDirection: \"column\"}}>\r\n              {taskStore.periodUserList.map(item => \r\n                (<View>\r\n                    <Text style={{fontSize: 20}}> {item.user} </Text>\r\n                    <List>\r\n                      {\r\n                        item.dataDates.map(date=>(\r\n                          <ListItem>\r\n                            <Text> Ngày: {date.date}</Text>\r\n                            <Text> Đăng ký: {date.selected}</Text>\r\n                            <Text style={{fontSize: 18, color: date.selected > date.completed? 'red': 'black'}}> Hoàn thành: {date.completed}</Text>\r\n                          </ListItem>\r\n                        ))\r\n                      }\r\n                    </List>\r\n                </View>)\r\n              )}\r\n          </View>\r\n        )}\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  result: {\r\n    marginLeft: \"10px\",\r\n    marginBottom: 20,\r\n    fontSize: 18,\r\n    fontWeight: \"bold\",\r\n    color: \"red\"\r\n  }\r\n});\r\n\r\n\r\nexport default observer(KidReport);","import \"react-native-gesture-handler\";\r\nimport { Body, Button, Container, Header, Icon, Left, Right, Tab, Tabs, Title } from \"native-base\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\r\nimport TodayTasksScreen from \"components/TodayTasks\";\r\nimport { ScrollView } from \"react-native\";\r\nimport KidReport from \"@components/KidReport\";\r\nimport {auth} from 'firebase/config';\r\nimport { useNavigation } from \"@react-navigation/native\";\r\n\r\nconst HelloWorldApp = (props) => {\r\n\r\n  // Set an initializing state whilst Firebase connects\r\n  const [initializing, setInitializing] = useState(true);\r\n  const navigation = useNavigation();\r\n  const [user, setUser] = useState();\r\n\r\n  // Handle user state changes\r\n  const onAuthStateChanged = (user) => {\r\n    navigation.navigate('LoginScreen');\r\n    if (!user){\r\n      navigation.navigate('LoginScreen');\r\n    }\r\n    setUser(user);\r\n    if (initializing) setInitializing(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const subscriber = auth.onAuthStateChanged(onAuthStateChanged);\r\n    return subscriber; // unsubscribe on unmount\r\n  }, []);  \r\n\r\n  const [tabIndex,setTab] = useState(0);\r\n  const tabChanged = (e)=> {\r\n    console.log(e);\r\n    setTab(e.i);\r\n  };\r\n\r\n  return (\r\n    <SafeAreaProvider>\r\n      <Container>\r\n        <ScrollView>\r\n        <Header>\r\n          <Left>\r\n            <Button transparent>\r\n              <Icon name=\"menu\" />\r\n            </Button>\r\n          </Left>\r\n          <Body>\r\n            <Title>SUMO DAYS</Title>\r\n          </Body>\r\n          <Right>\r\n            <Button transparent>\r\n            <Icon name=\"arrow-back\" />\r\n            </Button>\r\n          </Right>\r\n        </Header>\r\n        <Tabs onChangeTab={tabChanged}>\r\n          <Tab heading=\"Susu\">\r\n            <TodayTasksScreen index={tabIndex} user={__DEV__? \"Dad\": \"Susu\"}/>\r\n          </Tab>\r\n          <Tab heading=\"Nemo\">\r\n          <TodayTasksScreen index={tabIndex} user=\"Nemo\"/>\r\n          </Tab>\r\n          <Tab heading=\"Dad\">\r\n            <KidReport index={tabIndex}></KidReport>\r\n          </Tab>\r\n        </Tabs>\r\n        </ScrollView>\r\n      </Container>\r\n    </SafeAreaProvider>\r\n  );\r\n};\r\nexport default HelloWorldApp;","import { auth } from \"firebase/config\";\r\nimport { View, Text, Button } from \"native-base\";\r\nimport React from \"react\";\r\nimport { StatusBar, StyleSheet, TextInput, TouchableOpacity } from \"react-native\";\r\nimport {useState} from 'react';\r\n\r\nconst LoginScreen = ({ navigation }) => {\r\n\r\n  const [email,setEmail] = useState(\"\");\r\n  const [password,setPassword] = useState(\"\");\r\n  const [error,setError] = useState(\"\");\r\n  const login = () => {\r\n    auth.signInWithEmailAndPassword(email,password)\r\n    .then(() => navigation.navigate('HomeScreen'))\r\n    .catch(error => setError({ errorMessage: error.message }));\r\n  };\r\n\r\n    return (      \r\n    <View style={styles.container}>\r\n      <Text style={{fontSize: 18, margin: 30}}>Đăng nhập</Text>\r\n      {error.errorMessage &&\r\n      <Text style={{ color: 'red' }}>\r\n        {error.errorMessage}\r\n      </Text>}\r\n      <StatusBar style=\"auto\" />\r\n      <View style={styles.inputView}>\r\n        <TextInput\r\n          style={styles.TextInput}\r\n          placeholder=\"Email.\"\r\n          placeholderTextColor=\"#003f5c\"\r\n          onChangeText={(email) => setEmail(email)}\r\n        />\r\n      </View>\r\n \r\n      <View style={styles.inputView}>\r\n        <TextInput\r\n          style={styles.TextInput}\r\n          placeholder=\"Password.\"\r\n          placeholderTextColor=\"#003f5c\"\r\n          secureTextEntry={true}\r\n          onChangeText={(password) => setPassword(password)}\r\n        />\r\n      </View>\r\n \r\n      <TouchableOpacity>\r\n        <Text style={styles.forgot_button}>Forgot Password?</Text>\r\n      </TouchableOpacity>\r\n \r\n      <TouchableOpacity style={styles.loginBtn} onPress={login}>\r\n        <Text style={styles.loginText}>LOGIN</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n}\r\n \r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    maxWidth: 600,\r\n    width: 400,\r\n    alignSelf: \"center\",\r\n    backgroundColor: \"#fff\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n \r\n  image: {\r\n    marginBottom: 40,\r\n  },\r\n \r\n  inputView: {\r\n    backgroundColor: \"#FFC0CB\",\r\n    borderRadius: 30,\r\n    width: \"80%\",\r\n    height: 45,\r\n    marginBottom: 20,\r\n \r\n    alignItems: \"center\",\r\n  },\r\n \r\n  TextInput: {\r\n    height: 50,\r\n    flex: 1,\r\n    width: \"90%\",\r\n    padding: 10,\r\n    marginLeft: 20,\r\n  },\r\n \r\n  forgot_button: {\r\n    height: 30,\r\n    marginBottom: 30,\r\n  },\r\n \r\n  loginBtn: {\r\n    width: \"40%\",\r\n    borderRadius: 25,\r\n    height: 50,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    marginTop: 40,\r\n    backgroundColor: \"#FFC0CB\",\r\n  },\r\n});\r\n\r\nexport default LoginScreen;","import \"react-native-gesture-handler\";\r\nimport { Body, Button, Container, Header, Icon, Left, Right, Tab, Tabs, Title, View } from \"native-base\";\r\nimport React, { useState } from \"react\";\r\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\r\nimport TodayTasksScreen from \"components/TodayTasks\";\r\n\r\nconst HelloWorldApp = () => {\r\n\r\n  const [tabIndex,setTab] = useState(0);\r\n  const tabChanged = (e)=> {\r\n    console.log(e);\r\n    setTab(e.i);\r\n  };\r\n\r\n  return (\r\n    <View>Detail</View>\r\n  );\r\n};\r\nexport default HelloWorldApp;","import React, { useState, useEffect } from 'react';\r\nimport { StyleSheet, Text, View, TouchableOpacity, Image } from 'react-native';\r\nimport { Camera } from 'expo-camera';\r\nimport { Button, Icon } from 'native-base';\r\nimport { useRoute } from '@react-navigation/native';\r\n\r\nconst ModalScreen = ({ navigation }) => {\r\n  const [hasPermission, setHasPermission] = useState(null);\r\n  const [type, setType] = useState(Camera.Constants.Type.back);\r\n  const route = useRoute();\r\n  const [photo,setPhoto] = useState();\r\n  const [camera,setCamera] = useState();\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const { status } = await Camera.requestPermissionsAsync();\r\n      setHasPermission(status === 'granted');\r\n    })();\r\n  }, []);\r\n\r\n  if (hasPermission === null) {\r\n    return <View />;\r\n  }\r\n  if (hasPermission === false) {\r\n    return <Text>No access to camera</Text>;\r\n  }\r\n\r\n  const snap = async()=>{\r\n    if (camera) {\r\n      let photo = await camera.takePictureAsync();\r\n      setPhoto(photo);\r\n    }\r\n  };\r\n\r\n  const goBack = () => {\r\n    navigation.navigate(route.params.sourceScreen,{\r\n      photo: photo,\r\n      sourceScreen: 'CameraScreen',\r\n      id: route.params?.id\r\n    });\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {!photo &&\r\n      (<Camera style={styles.camera} type={type} ref={ref=>{\r\n          setCamera(ref);\r\n        }}>\r\n        <View style={styles.buttonContainer}>\r\n          <TouchableOpacity\r\n            style={styles.button}\r\n            onPress={() => {\r\n              setType(\r\n                type === Camera.Constants.Type.back\r\n                  ? Camera.Constants.Type.front\r\n                  : Camera.Constants.Type.back\r\n              );\r\n            }}>\r\n            <View style={{ flex:1, flexDirection: 'row', justifyContent: 'space-around', alignContent: 'center', marginLeft: 20}}>\r\n              <Text style={styles.text}> Camera sau </Text>\r\n              <Text style={styles.text} onPress={snap}> Chụp ảnh </Text>\r\n              <Button transparent style={{marginRight: 20}} onPress={goBack}>\r\n                <Icon name=\"arrow-back\" />\r\n            </Button>\r\n          </View>\r\n          </TouchableOpacity>\r\n        </View>\r\n      </Camera>\r\n      )}\r\n      {photo && \r\n        <View style={{ flex:1, flexDirection: 'column', justifyContent: 'space-around', alignContent: 'center', marginLeft: 20}}>\r\n          <Image source={{uri: photo.uri}} style={styles.image}>\r\n          </Image>\r\n          <View style={{flexDirection: \"row\", justifyContent: 'space-around', alignContent: 'center'}}>            \r\n            <Button onPress={()=>{setPhoto(null)}}>\r\n                <Text style={{fontSize: 18}}> Chụp lại </Text>\r\n            </Button>            \r\n            <Button onPress={goBack}>\r\n                <Text style={{fontSize: 18}}> Tải ảnh </Text>\r\n            </Button>\r\n          </View>\r\n        </View>\r\n      }\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    alignSelf: 'center',\r\n    width: 640,\r\n    height: 480\r\n  },\r\n  image: {\r\n    flex: 1,\r\n    width: 640,\r\n    height: 480\r\n  },\r\n  camera: {\r\n    flex: 1\r\n  },\r\n  buttonContainer: {\r\n    flex: 1,\r\n    backgroundColor: 'transparent',\r\n    flexDirection: 'row',\r\n    margin: 20,\r\n  },\r\n  button: {\r\n    flex: 1,\r\n    alignSelf: 'flex-end',\r\n    alignItems: 'center',\r\n  },\r\n  text: {\r\n    fontSize: 18,\r\n    marginLeft: 20,\r\n    color: 'white',\r\n  },\r\n});\r\n\r\n  \r\nexport default ModalScreen;","import { useNavigation } from \"@react-navigation/native\";\r\nimport { auth } from \"firebase/config\";\r\nimport { View, Text, Button, Spinner } from \"native-base\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { ActivityIndicator } from \"react-native\";\r\n\r\nconst LoadingScreen = () => {\r\n    // Set an initializing state whilst Firebase connects\r\n    const [initializing, setInitializing] = useState(true);\r\n    const navigation = useNavigation();\r\n    const [user, setUser] = useState();\r\n\r\n    // Handle user state changes\r\n    const onAuthStateChanged = (user) => {\r\n      if (!user){\r\n        navigation.navigate('LoginScreen');\r\n      }\r\n      else {\r\n        navigation.navigate('HomeScreen');\r\n      }\r\n      setUser(user);\r\n      if (initializing) setInitializing(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n      const subscriber = auth.onAuthStateChanged(onAuthStateChanged);\r\n      return subscriber; // unsubscribe on unmount\r\n    }, []);  \r\n    return (\r\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n          <Spinner color='green' />\r\n      </View>\r\n    );\r\n}\r\n\r\nexport default LoadingScreen;","import { createStackNavigator } from '@react-navigation/stack';\r\nimport HomeScreen from \"@components/screens/HomeScreen\";\r\nimport LoginScreen from \"@components/screens/LoginScreen\";\r\nimport React from \"react\";\r\nimport TaskDetailScreen from \"@components/screens/TaskDetailScreen\";\r\nimport CameraScreen from '@components/screens/CameraScreen';\r\nimport LoadingScreen from './LoadingScreen';\r\n\r\nconst MainStack = createStackNavigator();\r\n\r\nconst MainStackScreen = ({navigation}) => {\r\n    return (\r\n      <MainStack.Navigator headerMode=\"none\">\r\n        <MainStack.Screen name=\"LoadingScreen\" component={LoadingScreen} />\r\n        <MainStack.Screen name=\"HomeScreen\" component={HomeScreen} />\r\n        <MainStack.Screen name=\"LoginScreen\" component={LoginScreen} />\r\n        <MainStack.Screen name=\"CameraScreen\" component={CameraScreen} />\r\n        <MainStack.Screen name=\"TaskDetailScreen\" component={TaskDetailScreen} />\r\n      </MainStack.Navigator>\r\n    );\r\n}\r\n\r\nexport default MainStackScreen;","import { createStackNavigator } from '@react-navigation/stack';\r\nimport Home from \"components/screens/Home\";\r\nimport React from \"react\";\r\nimport TaskDetailScreen from \"components/screens/TaskDetailScreen\";\r\nimport LoginScreen from './LoginScreen';\r\n\r\nconst ModelStack = createStackNavigator();\r\n\r\nconst ModelStackScreen = ({navigation}) => {\r\n    return (\r\n      <ModelStack.Navigator headerMode=\"none\">\r\n        <ModelStack.Screen name=\"LoginScreen\" component={LoginScreen} />        \r\n        <ModelStack.Screen name=\"Details\" component={TaskDetailScreen} />\r\n      </ModelStack.Navigator>\r\n    );\r\n}\r\n\r\nexport default ModelStackScreen;","import \"react-native-gesture-handler\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from '@react-navigation/stack';\nimport React from \"react\";\nimport MainStack from \"@components/screens/MainStack\";\nimport ModelStackScreen from '@components/screens/ModelStack';\n\nconst RootStack = createStackNavigator();\n\nconst TaskApp = () => {\n  return (\n    <NavigationContainer>\n      <RootStack.Navigator mode=\"modal\" headerMode=\"none\">\n        <RootStack.Screen name=\"Main\" component={MainStack} />\n        <RootStack.Screen name=\"MyModal\" component={ModelStackScreen} />\n      </RootStack.Navigator>\n    </NavigationContainer>\n  );\n};\nexport default TaskApp;"],"sourceRoot":""}