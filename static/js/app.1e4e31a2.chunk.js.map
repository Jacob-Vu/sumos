{"version":3,"sources":["utils/Extensions.ts","firebase/config.ts","models/TaskItem.ts","stores/TaskStore.ts","stores/SelectTaskStore.ts","stores/RootStore.ts","components/TaskListItem.tsx","components/TodayTasks.tsx","App.tsx"],"names":["Date","prototype","format","mm","this","getMonth","dd","getDate","getFullYear","join","String","toDate","items","split","fire","db","firebase","apps","length","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","TaskItem","taskStore","id","task","cat","time","freqPerWeek","weekCount","isSelected","isCompleted","toggleComplete","makeAutoObservable","action","TaskStore","taskList","loading","loadTaskList","user","dateSl","a","async","collection","doc","get","userDoc","weekFromDate","addDays","getDay","weekToDate","loadSelectedDate","weekTaskList","selectedTasks","find","x","date","seconds","toLocaleDateString","docPath","taskDoc","data","exists","workList","listTask","map","v","selectedItem","taskId","reduce","acc","dayTask","fromTask","runInAction","push","console","log","userList","fromDate","dateSelects","where","forEach","saveSelectList","filterTasks","filter","set","lastUpdate","migrate","orderBy","computed","SelectTaskStore","dateStr","selectDoc","doneDoc","newItems","doneTasks","includes","attachments","lastUpdated","observable","rootStore","selectTaskStore","storesContext","React","createContext","styles","StyleSheet","create","baseText","fontSize","titleText","fontWeight","observer","props","taskItem","key","bottomDivider","style","backgroundColor","View","TouchableWithoutFeedback","onPress","onSelectItem","color","value","onValueChange","e","onDoneItem","result","marginLeft","marginBottom","useState","setDate","useContext","useEffect","index","toggleSelect","SelectDay","val","ScrollView","flexDirection","justifyContent","marginTop","Button","size","title","totalSelected","totalCompleted","sortedTaskList","i","HelloWorldApp","tabIndex","setTab","transparent","name","onChangeTab","heading","TodayTasks"],"mappings":"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","file":"static/js/app.1e4e31a2.chunk.js","sourcesContent":["Date.prototype.format = function() {\r\n    var mm = this.getMonth() + 1; // getMonth() is zero-based\r\n    var dd = this.getDate();\r\n\r\n    return [(dd>9 ? \"\" : \"0\") + dd,(mm>9 ? \"\" : \"0\") + mm,this.getFullYear()\r\n           ].join(\"-\");\r\n};\r\n\r\nString.prototype.toDate = function() {\r\n    const items = this.split(\"-\");\r\n    return new Date(items[2],items[1] - 1,items[0]);\r\n};","import firebase from \"@firebase/app\";\r\nimport \"@firebase/auth\";\r\nimport \"@firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCZ1W91h5gI4Ys3K44apJMX-dfAzKmKOzc\",\r\n    authDomain: \"todo-app-594e8.firebaseapp.com\",\r\n    projectId: \"todo-app-594e8\",\r\n    storageBucket: \"todo-app-594e8.appspot.com\",\r\n    messagingSenderId: \"254618059037\",\r\n    appId: \"1:254618059037:web:2a162824c6e6dfd3d921f4\",\r\n    measurementId: \"G-84M73W8WLD\"\r\n};\r\n\r\nlet fire = null;\r\nif (!firebase.apps.length) {\r\n   fire = firebase.initializeApp(firebaseConfig);\r\n} else {\r\n   fire = firebase.app(); // if already initialized, use that one\r\n}\r\n\r\nexport const auth = fire.auth();\r\n\r\nexport const db = fire.firestore();\r\n\r\nexport default {fire};","import { observable, computed, action, makeAutoObservable } from \"mobx\";\r\nimport { TaskStore } from '../stores/TaskStore';\r\n\r\nexport default class TaskItem {\r\n    taskStore: TaskStore;\r\n    id;\r\n    cat;\r\n    freqPerWeek;\r\n    time;\r\n    task;\r\n    isSelected;\r\n    isCompleted;\r\n    weekCount;\r\n\r\n    constructor(taskStore, id, task, cat, time, freqPerWeek,weekCount,isSelected = false, isCompleted = false) {\r\n\t\tthis.taskStore = taskStore;\r\n\t\tthis.id = id;\r\n        this.task = task;\r\n        this.cat = cat;\r\n        this.time = time;\r\n\t\tthis.freqPerWeek = freqPerWeek;\r\n        this.weekCount = weekCount;\r\n        this.isSelected = isSelected;\r\n        this.isCompleted = isCompleted;\r\n        makeAutoObservable(this);\r\n\t}\r\n\r\n    @action toggleSelect = () => {\r\n        this.isSelected = !this.isSelected;\r\n    }\r\n\r\n    toggleComplete = () => {\r\n        this.isCompleted = !this.isCompleted;\r\n    }\r\n\r\n    static fromTask(taskStore,task,weekCount,isSelected = false, isCompleted = false){\r\n        return new TaskItem(taskStore,task.id, task.task, task.cat, task.time, task.freqPerWeek, weekCount, isSelected, isCompleted);\r\n    }\r\n}","import { addDays, format } from \"date-fns\";\r\nimport orderBy from \"lodash/orderBy\";\r\nimport { action, computed, makeAutoObservable, runInAction } from \"mobx\";\r\nimport { db } from \"../firebase/config\";\r\nimport TaskItem from \"../models/TaskItem\";\r\nimport \"../utils/Extensions\";\r\n\r\nclass TaskStore {\r\n  \r\n  taskList = [];\r\n  loading = false;\r\n\r\n  constructor (){\r\n    console.log(\"Initialize TaskStore...\");\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  loadTaskList = async(user, dateSl) => {\r\n    this.loading = true;    \r\n    const userDoc = await db.collection(\"todolist\").doc(\"default\").get();    \r\n\r\n    const weekFromDate = addDays(dateSl, dateSl.getDay() > 0? 1 -dateSl.getDay(): -6);\r\n    const weekToDate = addDays(dateSl, dateSl.getDay() > 0? 7 - dateSl.getDay(): 0);\r\n    const weekTaskList = await this.loadSelectedDate([user], weekFromDate, weekToDate);\r\n\r\n    let selectedTasks: [] = weekTaskList.find( x=> new Date(x.date.seconds*1000).toLocaleDateString() == dateSl.toLocaleDateString())?.selectedTasks;\r\n    if (!selectedTasks){\r\n      const docPath = `${user}_${format(dateSl, \"dd-MM-yyyy\")}`;\r\n      const taskDoc = await db.collection(\"selectlist\").doc(docPath).get();\r\n      selectedTasks = taskDoc.data()?.selectedTasks;\r\n    }\r\n\r\n    if (userDoc.exists && userDoc.data().workList) {\r\n      const listTask = userDoc.data().workList.map((v) => {\r\n        const selectedItem = selectedTasks?.find((x) => v.id == x.taskId);\r\n        const weekCount = weekTaskList.reduce((acc,dayTask) => {\r\n            if (dayTask.selectedTasks.find(x=> x.taskId == v.id)){\r\n                return acc += 1;\r\n            }\r\n            return acc;\r\n        },0);\r\n        return TaskItem.fromTask(\r\n          this,\r\n          v,\r\n          weekCount,\r\n          selectedItem != null,\r\n          selectedItem?.isCompleted\r\n        );\r\n      });\r\n      runInAction(()=>{\r\n        this.taskList = [];\r\n        this.taskList.push(...listTask);\r\n        this.loading = false;\r\n      })\r\n    } else {\r\n      console.log(\"No doc values found\");\r\n    }\r\n  }\r\n\r\n  loadSelectedDate = async (userList, fromDate, toDate) => {\r\n    const dateSelects = [];\r\n    const querySnapshot = await db.collection(\"selectlist\")\r\n      .where(\"user\", \"in\", userList)\r\n      .where(\"date\", \">=\", fromDate)\r\n      .where(\"date\", \"<=\", toDate)\r\n      .get();\r\n    querySnapshot.forEach((doc) => {\r\n      dateSelects.push(doc.data());\r\n    });\r\n    return dateSelects;\r\n  }\r\n\r\n  saveSelectList = async (user, dateSl) => {\r\n    const docPath = `${user}_${format(dateSl, \"dd-MM-yyyy\")}`;\r\n    const filterTasks = this.taskList\r\n      .filter((x) => x.isSelected)\r\n      .map((task) => ({\r\n        taskId: task.id,\r\n        isCompleted: task.isCompleted,\r\n      }));\r\n    return await db.collection(\"selectlist\").doc(docPath).set({\r\n      date: dateSl,\r\n      lastUpdate: new Date(),\r\n      user,\r\n      selectedTasks: filterTasks,\r\n    });\r\n  }\r\n\r\n  @computed get sortedTaskList() {\r\n    return orderBy(this.taskList, [\"isSelected\", \"id\"], [\"desc\", \"asc\"]);\r\n  }\r\n\r\n  // can be called as `this.total`\r\n  @computed get totalCompleted() {\r\n    return this.taskList.filter((x) => x.isCompleted).length;\r\n  }\r\n\r\n  // can be called as `this.total`\r\n  @computed get totalSelected() {\r\n    return this.taskList.filter((x) => x.isSelected).length;\r\n  }\r\n\r\n  @action saveSelectTask(id) {\r\n\r\n  }\r\n\r\n  migrate = async() => {\r\n    db.collection(\"todolist\")\r\n      .doc(\"default\");\r\n  }\r\n}\r\n\r\nexport default TaskStore;\r\n","import { observable } from \"mobx\";\r\nimport { db } from \"../firebase/config\";\r\nimport \"../utils/Extensions\";\r\n\r\nexport class SelectTaskStore {\r\n    @observable selectedTasks = [];\r\n\r\n    async migrateData(user,date){\r\n        const dateStr = date.format();\r\n        const selectDoc = await db.collection(\"selectlist\" + user).doc(dateStr).get();\r\n        const doneDoc = await db.collection(\"donelist\" + user).doc(dateStr).get();\r\n        let newItems = [];\r\n        let doneTasks  = [];\r\n        const docPath = `${user}_${dateStr}`;\r\n        if (doneDoc.exists && doneDoc.data().doneTasks) {\r\n            doneDoc.data().doneTasks.forEach(taskId => {\r\n              doneTasks.push(taskId);\r\n            });\r\n          }\r\n        if (selectDoc.exists && selectDoc.data().selectedTasks) {\r\n            selectDoc.data().selectedTasks.forEach(taskId => {\r\n                newItems.push({\r\n                    id: `${docPath}_${taskId}`,\r\n                    taskId: taskId,\r\n                    date: date,\r\n                    user,\r\n                    isCompleted: doneTasks.includes(taskId),\r\n                    attachments: []\r\n                });\r\n            });\r\n        }\r\n        db.collection(\"selectlist\").doc(docPath).set({\r\n            lastUpdated: new Date(),\r\n            selectedTasks: newItems\r\n        });\r\n    }\r\n    async loadSelectTasks(user,dateStr){\r\n        const docPath = `${user}_${dateStr}`;\r\n        const selectDoc = await db.collection(\"selectlist\").doc(docPath).get();\r\n        if (selectDoc.exists && selectDoc.data().selectedTasks) {\r\n            selectDoc.data().selectedTasks.forEach(task => {\r\n                this.selectedTasks.push(task);\r\n            });\r\n        } else {\r\n            console.log(\"No doc values found\");\r\n        }\r\n    }\r\n}\r\n\r\nconst selectTaskStore = new SelectTaskStore();\r\n\r\nexport default selectTaskStore;","import React from 'react';\r\nimport TaskStore from './TaskStore';\r\nimport { SelectTaskStore } from './SelectTaskStore';\r\n\r\nclass RootStore {\r\n    taskStore: TaskStore;\r\n    selectTaskStore: SelectTaskStore;\r\n    constructor() {\r\n        this.taskStore = new TaskStore(this);\r\n        this.selectTaskStore = new SelectTaskStore(this);\r\n    }\r\n}\r\n\r\nconst rootStore = new RootStore();\r\n\r\nexport default rootStore;\r\n\r\nconst storesContext = React.createContext({ ...rootStore });\r\nexport const useStores = () => React.useContext(storesContext);\r\n\r\n","import { Body, ListItem, Right, Switch, Text } from \"native-base\";\r\nimport React from \"react\";\r\nimport { StyleSheet, TouchableWithoutFeedback, View } from \"react-native\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\n\r\nconst TaskListItem = (props) => {\r\n  const { taskItem } = props;\r\n  return (\r\n    <ListItem key={taskItem.id} bottomDivider style={{ backgroundColor: taskItem.isSelected? \"#cde1f9\": \"#fcfcfc\"}}>\r\n             <Body>\r\n               <View>\r\n                 <TouchableWithoutFeedback onPress={() => props.onSelectItem(taskItem)}>\r\n                   <View>\r\n                      <Text style={styles.titleText}>{taskItem.id}. {taskItem.task}</Text>\r\n                      <Text style={styles.baseText}>Mục: {taskItem.cat} </Text>\r\n                      { taskItem.weekCount > 0 ? (<Text style={{fontSize: 13,color: taskItem.weekCount > taskItem.freqPerWeek? 'red': ''}}>Đã chọn: {taskItem.weekCount} lần (Được chọn {taskItem.freqPerWeek} lần) </Text>)\r\n                      : (<Text style={{fontSize: 13}}>Được chọn {taskItem.freqPerWeek} lần </Text>) }\r\n                   </View>\r\n                 </TouchableWithoutFeedback>\r\n               </View>\r\n             </Body>\r\n             <Right>\r\n              {/* <Button title=\"Detail\" onPress={() => Alert.alert('Simple Button pressed')} >\r\n              </Button> */}\r\n               { taskItem.isSelected && (\r\n                  <Switch value={taskItem.isCompleted} onValueChange={(e)=> { props.onDoneItem(taskItem);}}  />\r\n                )\r\n              }\r\n             </Right>\r\n         </ListItem>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  baseText: {\r\n    fontSize: 11,\r\n  },\r\n  titleText: {\r\n    fontSize: 15,\r\n    fontWeight: \"bold\"\r\n  }  \r\n});\r\n\r\n\r\nexport default observer(TaskListItem);","import { addDays, format } from \"date-fns\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { List, Spinner, Text } from \"native-base\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Button, ScrollView, StyleSheet, View } from \"react-native\";\r\nimport TaskItem from \"../models/TaskItem\";\r\nimport { useStores } from \"../stores/RootStore\";\r\nimport TaskListItem from \"./TaskListItem\";\r\n\r\n\r\nconst TodayTasksScreen = (props) => {\r\n  const [dateSl,setDate] = useState(new Date());\r\n  const { taskStore } = useStores();\r\n\r\n  useEffect(()=> {\r\n    taskStore.loadTaskList(props.user,dateSl);\r\n  },[props.index, props.user,dateSl]);\r\n\r\n  const onSelectItem = (task: TaskItem) => {\r\n    task.toggleSelect();\r\n  };\r\n\r\n  const SaveSelectList = async() => {\r\n    await taskStore.saveSelectList(props.user,dateSl);\r\n  };\r\n\r\n  const onDoneItem = (task: TaskItem) => {\r\n    task.toggleComplete();\r\n  };\r\n\r\n  const SelectDay = (val) => {\r\n    setDate(addDays(dateSl, val));\r\n  };\r\n\r\n  return (\r\n     <ScrollView>\r\n        <View style={{flexDirection: \"column\"}}>\r\n          <View style={{flexDirection: \"row\", justifyContent: \"space-around\", marginTop: 20, marginBottom: 20 }}>\r\n             <Button style={{size: \"\"}} title=\"<< Hôm qua\" onPress={()=> SelectDay(-1)}/>\r\n             <Button style={{size: \"\"}} title=\"Lưu việc đã chọn\" onPress={()=> SaveSelectList()}></Button>\r\n             <Button style={{size: \"\"}} title=\"Hôm sau >>\" onPress={()=> SelectDay(1)}/>\r\n          </View>\r\n        </View>\r\n        {taskStore.loading ? (<Spinner/> ):\r\n        (\r\n          <View style={{flexDirection: \"column\"}}>\r\n            <Text style={styles.result} > Ngày {format(dateSl,\"dd-MM-yyyy\")}, \r\n              {props.user} đã chọn {taskStore.totalSelected} việc. {\"\\r\\n\"} Đã hoàn thành: {taskStore.totalCompleted} việc</Text>\r\n            <Text style={{ fontSize: 18, fontWeight: \"bold\", marginLeft: 15, marginBottom: 20}}>Danh sách công việc: </Text>\r\n            <List>\r\n            {\r\n              taskStore.sortedTaskList.map((taskItem, i) => (\r\n                <TaskListItem key={taskItem.id} taskItem={taskItem} onSelectItem={onSelectItem} onDoneItem={onDoneItem} />\r\n              ))\r\n            }\r\n            </List>\r\n          </View>\r\n        )}\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({  \r\n  result: {\r\n    marginLeft: \"10px\",\r\n    marginBottom: 20,\r\n    fontSize: 18,\r\n    fontWeight: \"bold\",\r\n    color: \"red\"\r\n  }\r\n});\r\n\r\n\r\nexport default observer(TodayTasksScreen);","import { Body, Button, Container, Header, Icon, Left, Right, Tab, Tabs, Title } from \"native-base\";\nimport React, { useState } from \"react\";\nimport { ScrollView } from \"react-native\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\nimport TodayTasksScreen from \"./components/TodayTasks\";\n\nconst HelloWorldApp = () => {\n  \n  const [tabIndex,setTab] = useState(0);\n  const tabChanged = (e)=>{\n    console.log(e);\n    setTab(e.i);\n  }\n\n  return (\n    <SafeAreaProvider>\n      <ScrollView>\n      <Container>\n        <Header>\n          <Left>\n            <Button transparent>\n              <Icon name='menu' />\n            </Button>\n          </Left>\n          <Body>\n            <Title>SUMO DAYS</Title>\n          </Body>\n          <Right>\n            <Button transparent>\n            <Icon name='arrow-back' />\n            </Button>\n          </Right>\n        </Header>\n        <Tabs onChangeTab={tabChanged}>\n          <Tab heading=\"Susu\">\n            <TodayTasksScreen index={tabIndex} user=\"Susu\"/>\n          </Tab>\n          <Tab heading=\"Nemo\">\n            <TodayTasksScreen index={tabIndex} user=\"Nemo\"/>\n          </Tab>\n          <Tab heading=\"Dad\">\n            <TodayTasksScreen index={tabIndex} user=\"Dad\"/>\n          </Tab>\n        </Tabs>\n      </Container>\n      </ScrollView>\n    </SafeAreaProvider>      \n  );\n};\nexport default HelloWorldApp;"],"sourceRoot":""}